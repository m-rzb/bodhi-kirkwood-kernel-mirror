diff -Naur a/arch/arm/boot/dts/kirkwood-asus_m25.dts b/arch/arm/boot/dts/kirkwood-asus_m25.dts
--- a/arch/arm/boot/dts/kirkwood-asus_m25.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-asus_m25.dts	2016-03-13 22:15:22.690569987 -0700
@@ -0,0 +1,330 @@
+/*
+ * Asus-M25 ( Marvell DB-88F6281-BP Development Board )
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+/dts-v1/;
+
+#include "kirkwood.dtsi"
+#include "kirkwood-6281.dtsi"
+
+/ {
+	model = "Asus-M25";
+	compatible = "asus,asus_m25", "marvell,db-88f6281-bp", "marvell,kirkwood-88f6281", "marvell,kirkwood";
+
+	memory {
+		device_type = "memory";
+		reg = <0x00000000 0x20000000>; /* 512 MB */
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200n8 earlyprintk";
+		stdout-path = &uart0;
+	};
+
+	mbus {
+		pcie-controller {
+			status = "okay";
+			pcie@1,0 {
+				status = "okay";
+			};
+		};
+	};
+
+	gpio-leds {
+		compatible = "gpio-leds";
+		pinctrl-0 = <&pmx_led_power_on>;
+		pinctrl-names = "default";
+		led_power_blu {
+			label = "Power:Blu";
+			gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
+			default-state = "keep";
+		};
+		led_hdd0_red {
+			label = "HDD0:Red";
+			gpios = <&gpio0 28 GPIO_ACTIVE_LOW>;
+		};
+		led_hdd1_red {
+			label = "HDD1:Red";
+			gpios = <&gpio0 27 GPIO_ACTIVE_LOW>;
+		};
+		led_usb_blu {
+			label = "USB:Blu";
+			gpios = <&gpio0 29 GPIO_ACTIVE_LOW>;
+		};
+		led_hdd0_gre {
+			label = "HDD0:Gre";
+			gpios = <&gpio0 25 GPIO_ACTIVE_LOW>;
+		};
+		led_hdd1_gre {
+			label = "HDD1:Gre";
+			gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;
+		};
+		led_hdd0_blu {
+			label = "HDD0:Blu";
+			gpios = <&gpio0 21 GPIO_ACTIVE_LOW>;
+		};
+		led_hdd1_blu {
+			label = "HDD1:Blu";
+			gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
+		};
+	};
+
+	gpio_keys {
+		compatible = "gpio-keys";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-0 = <&pmx_button_power &pmx_button_unmount
+			     &pmx_button_reset>;
+		pinctrl-names = "default";
+		button@1 {
+			label = "Power button";
+			linux,code = <KEY_POWER>;
+			gpios = <&gpio1 2 GPIO_ACTIVE_LOW>;
+		};
+		button@2 {
+			label = "USB unmount button";
+			linux,code = <KEY_EJECTCD>;
+			gpios = <&gpio1 11 GPIO_ACTIVE_LOW>;
+		};
+		button@3 {
+			label = "Reset button";
+			linux,code = <KEY_RESTART>;
+			gpios = <&gpio1 16 GPIO_ACTIVE_LOW>;
+		};
+	};
+
+	gpio_poweroff {
+		compatible = "gpio-poweroff";
+		pinctrl-0 = <&pmx_power_off>;
+		pinctrl-names = "default";
+		gpios = <&gpio1 4 GPIO_ACTIVE_HIGH>;
+	};
+
+	ocp@f1000000 {
+		i2c@11000 {
+			status = "okay";
+			lm75: lm75@49 {
+				compatible = "national,lm75";
+				reg = <0x49>;
+			};
+		};
+		pinctrl: pin-controller@10000 {
+			pinctrl-0 = <&pmx_power_back_on &pmx_present_sata0
+				     &pmx_present_sata1 &pmx_fan_tacho
+				     &pmx_fan_alarm &pmx_temp_alarm>;
+			pinctrl-names = "default";
+			pmx_fan_alarm: pmx-fan-alarm {
+				marvell,pins = "mpp12";
+				marvell,function = "gpio";
+			};
+			pmx_temp_alarm: pmx-temp-alarm {
+				marvell,pins = "mpp17";
+				marvell,function = "gpio";
+			};
+			pmx_sata0: pmx-sata0 {
+				marvell,pins = "mpp20";
+				marvell,function = "sata1";
+			};
+			pmx_sata1: pmx-sata1 {
+				marvell,pins = "mpp21";
+				marvell,function = "sata0";
+			};
+			pmx_led_usb_blu: pmx-led-usb-blu {
+				marvell,pins = "mpp29";
+				marvell,function = "gpio";
+			};
+			pmx_led_power_on: pmx-led-power-on {
+				marvell,pins = "mpp31";
+				marvell,function = "gpio";
+			};
+			pmx_button_power: pmx-button-power {
+				marvell,pins = "mpp34";
+				marvell,function = "gpio";
+			};
+			pmx_power_off: pmx-power-off {
+				marvell,pins = "mpp36";
+				marvell,function = "gpio";
+			};
+			pmx_power_back_on: pmx-power-back-on {
+				marvell,pins = "mpp37";
+				marvell,function = "gpio";
+			};
+			pmx_power_sata0: pmx-power-sata0 {
+				marvell,pins = "mpp39";
+				marvell,function = "gpio";
+			};
+			pmx_power_sata1: pmx-power-sata1 {
+				marvell,pins = "mpp40";
+				marvell,function = "gpio";
+			};
+			pmx_present_sata0: pmx-present-sata0 {
+				marvell,pins = "mpp41";
+				marvell,function = "gpio";
+			};
+			pmx_present_sata1: pmx-present-sata1 {
+				marvell,pins = "mpp42";
+				marvell,function = "gpio";
+			};
+			pmx_led_htp: pmx-led-htp {
+				marvell,pins = "mpp43";
+				marvell,function = "gpio";
+			};
+			pmx_fan_tacho: pmx-fan-tacho {
+				marvell,pins = "mpp44";
+				marvell,function = "gpio";
+			};
+			pmx_fan_high: pmx-fan-high {
+				marvell,pins = "mpp45";
+				marvell,function = "gpio";
+			};
+			pmx_fan_low: pmx-fan-low {
+				marvell,pins = "mpp46";
+				marvell,function = "gpio";
+			};
+			pmx_button_unmount: pmx-button-unmount {
+				marvell,pins = "mpp47";
+				marvell,function = "gpio";
+			};
+			pmx_button_reset: pmx-button-reset {
+				marvell,pins = "mpp48";
+				marvell,function = "gpio";
+			};
+			pmx_usb_vbus: pmx-usb-vbus {
+				marvell,pins = "mpp49";
+				marvell,function = "gpio";
+			};
+		};
+
+		sata@80000 {
+			pinctrl-0 = <&pmx_sata0 &pmx_sata1>;
+			pinctrl-names = "default";
+			status = "okay";
+			nr-ports = <2>;
+		};
+		serial@12000 {
+			status = "okay";
+		};
+		ehci@50000 {
+			status = "okay";
+		};
+	};
+
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-0 = <&pmx_power_sata0 &pmx_power_sata1>;
+		pinctrl-names = "default";
+		sata0_power: regulator@1 {
+			compatible = "regulator-fixed";
+			reg = <1>;
+			regulator-name = "SATA0 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio1 7 0>;
+		};
+		sata1_power: regulator@2 {
+			compatible = "regulator-fixed";
+			reg = <2>;
+			regulator-name = "SATA1 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio1 8 0>;
+		};
+	};
+};
+
+&nand {
+/*	chip-delay = <25>; */
+	status = "okay";
+
+	partition@0 {
+		label = "u-boot";
+		reg = <0x0000000 0xe0000>;
+	};
+
+	partition@e0000 {
+		label = "imagecfg";
+		reg = <0xe0000 0x20000>;
+	};
+
+	partition@100000 {
+		label = "uImage";
+		reg = <0x100000 0x300000>;
+/*		read-only; */
+	};
+
+	partition@400000 {
+		label = "initrd";
+		reg = <0x400000 0x200000>;
+/*		read-only; */
+	};
+
+	partition@600000 {
+		label = "jffs2";
+		reg = <0x600000 0x200000>;
+/*		read-only; */
+	};
+
+	partition@800000 {
+		label = "squash";
+		reg = <0x800000 0x37e0000>;
+/*		read-only; */
+	};
+
+	partition@3fe0000 {
+		label = "NULL";
+		reg = <0x3fe0000 0x20000>;
+/*		read-only; */
+	};
+
+	partition@4000000 {
+		label = "uImage_2";
+		reg = <0x4000000 0x300000>;
+/*		read-only; */
+	};
+
+	partition@4300000 {
+		label = "initrd_2";
+		reg = <0x4300000 0x200000>;
+/*		read-only; */
+	};
+
+	partition@4500000 {
+		label = "jffs2_2";
+		reg = <0x4500000 0x200000>;
+/*		read-only; */
+	};
+
+	partition@4700000 {
+		label = "squash_2";
+		reg = <0x4700000 0x3900000>;
+/*		read-only; */
+	};
+
+};
+
+&mdio {
+	status = "okay";
+
+	ethphy0: ethernet-phy@8 {
+		reg = <8>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
diff -Naur a/arch/arm/boot/dts/kirkwood-goflexhome.dts b/arch/arm/boot/dts/kirkwood-goflexhome.dts
--- a/arch/arm/boot/dts/kirkwood-goflexhome.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-goflexhome.dts	2016-03-13 22:15:22.690569987 -0700
@@ -0,0 +1,127 @@
+/dts-v1/;
+
+#include "kirkwood.dtsi"
+#include "kirkwood-6281.dtsi"
+
+/ {
+	model = "Seagate GoFlex Home";
+	compatible = "seagate,goflexhome", "marvell,kirkwood-88f6281", "marvell,kirkwood";
+
+	memory {
+		device_type = "memory";
+		reg = <0x00000000 0x8000000>;
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200n8 earlyprintk root=/dev/sda1 rootdelay=10";
+		stdout-path = &uart0;
+	};
+
+       ocp@f1000000 {
+               pinctrl: pin-controller@10000 {
+                       pmx_usb_power_enable: pmx-usb-power-enable {
+                               marvell,pins = "mpp29";
+                               marvell,function = "gpio";
+                       };
+                       pmx_led_white: pmx-led_white {
+                               marvell,pins = "mpp40";
+                               marvell,function = "gpio";
+                       };
+                       pmx_led_green: pmx-led_green {
+                               marvell,pins = "mpp46";
+                               marvell,function = "gpio";
+                       };
+                       pmx_led_orange: pmx-led_orange {
+                               marvell,pins = "mpp47";
+                               marvell,function = "gpio";
+                       };
+		};
+		serial@12000 {
+			status = "ok";
+		};
+
+		sata@80000 {
+			status = "okay";
+			nr-ports = <1>;
+		};
+
+	};
+       gpio-leds {
+               compatible = "gpio-leds";
+               pinctrl-0 = < &pmx_led_orange
+                             &pmx_led_green
+                             &pmx_led_white
+                           >;
+               pinctrl-names = "default";
+
+               health {
+                       label = "status:green:health";
+                       gpios = <&gpio1 14 GPIO_ACTIVE_LOW>;
+                       default-state = "keep";
+               };
+               fault {
+                       label = "status:orange:fault";
+                       gpios = <&gpio1 15 GPIO_ACTIVE_LOW>;
+               };
+               misc {
+                       label = "status:white:misc";
+                       gpios = <&gpio1 8 GPIO_ACTIVE_HIGH>;
+                       linux,default-trigger = "ide-disk1";
+               };
+	};
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-0 = <&pmx_usb_power_enable>;
+		pinctrl-names = "default";
+
+		usb_power: regulator@1 {
+			compatible = "regulator-fixed";
+			reg = <1>;
+			regulator-name = "USB Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 29 GPIO_ACTIVE_HIGH>;
+		};
+	};
+};
+
+&nand {
+	chip-delay = <40>;
+	status = "okay";
+
+	partition@0 {
+		label = "u-boot";
+		reg = <0x0000000 0x100000>;
+		read-only;
+	};
+
+	partition@100000 {
+		label = "uImage";
+		reg = <0x0100000 0x0600000>;
+	};
+
+	partition@0600000 {
+		label = "root";
+		reg = <0x0600000 0xd800000>;
+	};
+};
+
+&mdio {
+	status = "okay";
+
+	ethphy0: ethernet-phy@0 {
+		reg = <0>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
diff -Naur a/arch/arm/boot/dts/kirkwood-goflexnet.dts b/arch/arm/boot/dts/kirkwood-goflexnet.dts
--- a/arch/arm/boot/dts/kirkwood-goflexnet.dts	2016-03-13 21:28:54.000000000 -0700
+++ b/arch/arm/boot/dts/kirkwood-goflexnet.dts	2016-03-13 22:15:22.710569965 -0700
@@ -108,6 +108,7 @@
 		left3 {
 			label = "status:white:left3";
 			gpios = <&gpio1 13 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "ide-disk2";
 		};
 		right0 {
 			label = "status:white:right0";
@@ -124,6 +125,7 @@
 		right3 {
 			label = "status:white:right3";
 			gpios = <&gpio1 9 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "ide-disk1";
 		};
 	};
 	regulators {
diff -Naur a/arch/arm/boot/dts/kirkwood-iomega_ix4_200d.dts b/arch/arm/boot/dts/kirkwood-iomega_ix4_200d.dts
--- a/arch/arm/boot/dts/kirkwood-iomega_ix4_200d.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-iomega_ix4_200d.dts	2016-03-13 22:15:22.710569965 -0700
@@ -0,0 +1,108 @@
+/* Device tree file for the Iomega ix4-200d
+ *
+ * Copyright (c) 2015, bodhi <mibodhi@gmail.com>
+ * Copyright (c) 2015, DaMacc
+ *
+*/
+
+/dts-v1/;
+
+#include "kirkwood.dtsi"      
+#include "kirkwood-6281.dtsi" 
+
+/ {
+	model = "Iomega ix4-200d";
+	compatible = "marvell,rd88f6281-a", "marvell,rd88f6281", "marvell,kirkwood-88f6281", "marvell,kirkwood";
+
+memory {                                    
+        device_type = "memory";             
+        reg = <0x00000000 0x20000000>;      
+};                                          
+                                            
+chosen {                                    
+        bootargs = "console=ttyS0,115200n8 earlyprintk";
+        stdout-path = &uart0;               
+};                                          
+                                            
+mbus {                                      
+        pcie-controller {                   
+                status = "okay";            
+                                            
+                pcie@1,0 {                  
+                        status = "okay";    
+                };                          
+        };                                  
+};
+
+ocp@f1000000 {
+
+	i2c@11000 {                                
+		status = "okay";                   
+						   
+		adt7473@2e {                       
+			compatible = "adi,adt7473";
+			reg = <0x2e>;              
+		};                                 
+	};                                         
+	
+        serial@12000 {                               
+                status = "ok";                       
+        };                                           
+                                                     
+        sata@80000 {                                 
+                status = "okay";                     
+                nr-ports = <2>;                      
+        };                                           
+                                                     
+};
+
+};
+
+&nand {
+        chip-delay = <40>;
+        status = "okay";
+
+        partition@0 {
+                label = "u-boot";
+                reg = <0x0000000 0x100000>;
+                read-only;
+        };
+
+        partition@100000 {
+                label = "uImage";
+                reg = <0x0100000 0x0500000>;
+        };
+
+        partition@0500000 {
+                label = "rootfs";
+                reg = <0x0500000 0x2000000>;
+        };
+};
+
+&mdio {
+	status = "okay";
+
+	ethphy0: ethernet-phy@8 {
+		device_type = "ethernet-phy";
+		reg = <8>;
+	};
+
+	ethphy1: ethernet-phy@9 {
+		device_type = "ethernet-phy";
+		reg = <9>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
+
+&eth1 {
+	status = "okay";
+	ethernet1-port@0 {
+		phy-handle = <&ethphy1>;
+	};
+};
diff -Naur a/arch/arm/boot/dts/kirkwood-n1t1.dts b/arch/arm/boot/dts/kirkwood-n1t1.dts
--- a/arch/arm/boot/dts/kirkwood-n1t1.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-n1t1.dts	2016-03-17 12:46:21.351144631 -0700
@@ -0,0 +1,233 @@
+/* Device tree file for the LG N1T1  NAS box.
+ *
+ * Copyright (c) 2016 Aron Koszo <koszoaron@gmail.com>
+ *                         bodhi <mibodhi@gmail.com> 
+ *
+*/
+
+/dts-v1/;
+
+#include "kirkwood.dtsi"
+#include "kirkwood-6281.dtsi"
+
+/ {
+	model = "LG N1T1";
+	compatible = "lg,n1t1", "marvell,kirkwood-88f6281", "marvell,kirkwood";
+
+	memory {
+		device_type = "memory";
+		reg = <0x00000000 0x8000000>;
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200n8 earlyprintk root=/dev/sda1 rootdelay=10";
+		stdout-path = &uart0;
+	};
+
+	ocp@f1000000 {
+		pinctrl: pin-controller@10000 {
+			pmx_uart0: pmx-uart0 {
+				marvell,pins = "mpp5", "mpp4";
+				marvell,function = "uart0";
+			};
+            		pmx_power_off: pmx-power-off {
+                		marvell,pins = "mpp7";
+                		marvell,function = "gpo";
+            		};
+			pmx_power_usb: pmx-power-usb {
+				marvell,pins = "mpp10";
+				marvell,function = "gpo";
+			};
+			pmx_button_ext_hdd: pmx-button-ext-hdd {
+				marvell,pins = "mpp11";
+                		marvell,function = "gpio";
+            		};
+            		pmx_power_sata0: pmx-power-sata0 {
+                		marvell,pins = "mpp15";
+                		marvell,function = "gpio";
+            		};
+            		pmx_button_ext_odd: pmx-button-ext-odd {
+				marvell,pins = "mpp16";
+                		marvell,function = "gpio";
+            		};
+            		pmx_power_sata1: pmx-power-sata1 {
+                		marvell,pins = "mpp17";
+                		marvell,function = "gpio";
+            		};
+            		pmx_power_usb_sense: pmx-power-usb-sense {
+                		marvell,pins = "mpp26";
+                		marvell,function = "gpio";
+            		};
+            		pmx_button_power: pmx-button-power {
+				marvell,pins = "mpp29";
+                		marvell,function = "gpio";
+            		};
+			pmx_led_usb: pmx-led-usb {
+				marvell,pins = "mpp30";
+				marvell,function = "gpio";
+			};
+            		pmx_button_backup: pmx-button-backup {
+				marvell,pins = "mpp31";
+                		marvell,function = "gpio";
+           		 };
+            		pmx_led_odd: pmx-led-odd {
+				marvell,pins = "mpp34";
+				marvell,function = "gpio";
+			};
+            		pmx_led_hdd: pmx-led-hdd {
+				marvell,pins = "mpp35";
+				marvell,function = "gpio";
+			};			
+		};
+        
+		serial@12000 {
+			status = "ok";
+		};
+        
+        spi@10600 {
+			status = "okay";
+
+			flash@0 {
+				#address-cells = <1>;
+				#size-cells = <1>;
+				compatible = "mxicy,mx25l4005a", "jedec,spi-nor";
+				reg = <0>;
+				spi-max-frequency = <20000000>;
+				mode = <0>;
+
+				partition@0 {
+					reg = <0x0 0x80000>;
+					label = "u-boot";
+				};
+			};
+		};
+
+		sata@80000 {
+			status = "okay";
+			nr-ports = <2>;
+		};
+
+	};
+    
+	gpio-leds {
+		compatible = "gpio-leds";
+		pinctrl-0 = < &pmx_led_hdd &pmx_led_odd &pmx_led_usb >;
+		pinctrl-names = "default";
+
+		hdd {
+			label = "status:white:hdd";
+			gpios = <&gpio1 3 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "ide-disk2";
+		};
+		odd {
+			label = "status:white:odd";
+			gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "ide-disk1";
+		};
+		usb {
+			label = "status:white:usb";
+			gpios = <&gpio0 30 GPIO_ACTIVE_HIGH>;
+		};
+	};
+    
+    gpio-keys {
+		compatible = "gpio-keys";
+		#address-cells = <1>;
+		#size-cells = <0>;
+        pinctrl-0 = <&pmx_button_ext_hdd &pmx_button_ext_odd
+			     &pmx_button_power &pmx_button_backup>;
+		pinctrl-names = "default";
+
+		button@1 {
+			label = "EXT HDD";
+			linux,code = <KEY_FN_1>;
+			linux,input-type = <5>;
+            debounce-interval = <1000>;
+			gpios = <&gpio0 11 GPIO_ACTIVE_LOW>;
+		};
+		button@2 {
+			label = "EXT ODD";
+			linux,code = <KEY_FN_2>;
+			linux,input-type = <5>;
+			debounce-interval = <1000>;
+            gpios = <&gpio0 16 GPIO_ACTIVE_LOW>;
+		};
+		button@3 {
+			label = "Power";
+			linux,code = <KEY_POWER>;
+			gpios = <&gpio0 29 GPIO_ACTIVE_HIGH>;
+		};
+        button@4 {
+			label = "Backup";
+			linux,code = <KEY_COPY>;
+			gpios = <&gpio0 31 GPIO_ACTIVE_HIGH>;
+		};
+
+	};
+    
+    	gpio-poweroff {
+		compatible = "gpio-poweroff";
+        	pinctrl-0 = <&pmx_power_off>;
+		pinctrl-names = "default";
+		gpios = <&gpio0 7 GPIO_ACTIVE_LOW>;
+	};
+    
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-0 = <&pmx_power_usb &pmx_power_sata0 &pmx_power_sata1>;
+		pinctrl-names = "default";
+
+		usb_power: regulator@1 {
+			compatible = "regulator-fixed";
+			reg = <1>;
+			regulator-name = "USB Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 10 GPIO_ACTIVE_HIGH>;
+		};
+        
+        sata0_power: regulator@2 {
+			compatible = "regulator-fixed";
+			reg = <2>;
+			regulator-name = "SATA0 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 15 GPIO_ACTIVE_HIGH>;
+		};
+        
+		sata1_power: regulator@3 {
+			compatible = "regulator-fixed";
+			reg = <3>;
+			regulator-name = "SATA1 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 17 GPIO_ACTIVE_HIGH>;
+		};
+	};
+};
+
+&mdio {
+	status = "okay";
+
+	ethphy0: ethernet-phy@8 {
+		reg = <8>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
diff -Naur a/arch/arm/boot/dts/kirkwood-netgear_stora_ms2000.dts b/arch/arm/boot/dts/kirkwood-netgear_stora_ms2000.dts
--- a/arch/arm/boot/dts/kirkwood-netgear_stora_ms2000.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-netgear_stora_ms2000.dts	2016-03-13 22:15:22.710569965 -0700
@@ -0,0 +1,227 @@
+/dts-v1/;
+
+#include "kirkwood.dtsi"
+#include "kirkwood-6281.dtsi"
+
+/ {
+	model = "NETGEAR MS2000 / MS2110 aka Stora";
+	compatible = "netgear,stora,ms2000,ms2110", "netgear,stora", "marvell,kirkwood-88f6281", "marvell,kirkwood";
+
+	memory { /* 128 MB */
+		device_type = "memory";
+		reg = <0x00000000 0x8000000>;
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200n8 earlyprintk";
+		stdout-path = &uart0;
+	};
+
+	mbus {
+		pcie-controller {
+			status = "okay";
+
+			pcie@1,0 {
+				status = "okay";
+			};
+		};
+	};
+
+	ocp@f1000000 {
+		pinctrl: pin-controller@10000 {
+			pmx_button_power: pmx-button-power {
+				marvell,pins = "mpp36";
+				marvell,function = "gpio";
+			};
+
+			pmx_button_reset: pmx-button-reset {
+				marvell,pins = "mpp38";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_blue_activity: pmx-led-blue-activity {
+				marvell,pins = "mpp31";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_blue_power: pmx-led-blue-power {
+				marvell,pins = "mpp32";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_green_disk1: pmx-led-green-disk1 {
+				marvell,pins = "mpp21";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_green_disk2: pmx-led-green-disk2 {
+				marvell,pins = "mpp20";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_red_disk1: pmx-led-red-disk1 {
+				marvell,pins = "mpp23";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_red_disk2: pmx-led-red-disk2 {
+				marvell,pins = "mpp22";
+				marvell,function = "gpio";
+			};
+
+			pmx_poweroff: pmx-poweroff {
+				marvell,pins = "mpp40";
+				marvell,function = "gpio";
+			};
+
+			pmx_fan_tacho: pmx-fan-tacho {
+				marvell,pins = "mpp41";
+				marvell,function = "gpio";
+			};
+		};
+
+		clocks {
+			pcf8563_clk: pcf8563-oscillator {
+				compatible = "fixed-clock";
+				#clock-cells = <0>;
+				clock-frequency = <32768>;
+			};
+		};
+
+		i2c@11000 {
+			status = "okay";
+
+			lm75: lm75@48 {
+				compatible = "national,lm75";
+				reg = <0x48>;
+			};
+
+			pcf8563: pcf8563@51 {
+				compatible = "nxp,pcf8563";
+				reg = <0x51>;
+			};
+		};
+
+		serial@12000 {
+			status = "okay";
+		};
+
+		sata@80000 {
+			status = "okay";
+			nr-ports = <2>;
+		};
+
+		ehci@50000 {
+			status = "okay";
+		};
+	};
+
+	gpio-leds {
+		compatible = "gpio-leds";
+		pinctrl-0 = < &pmx_led_blue_activity &pmx_led_blue_power
+			      &pmx_led_green_disk1 &pmx_led_green_disk2
+			      &pmx_led_red_disk1 &pmx_led_red_disk2 >;
+		pinctrl-names = "default";
+
+		activity_led {
+			label = "status:blue:activity_led";
+			gpios = <&gpio0 31 GPIO_ACTIVE_LOW>;
+			default-state = "keep";
+			linux,default-trigger = "heartbeat";
+		};
+
+		power_led {
+			label = "status:blue:power_led";
+			gpios = <&gpio1 0 GPIO_ACTIVE_LOW>;
+			default-state = "keep";
+			linux,default-trigger = "default-on";
+		};
+
+		disk1_led {
+			label = "status:green:disk1_led";
+			gpios = <&gpio0 21 GPIO_ACTIVE_LOW>;
+			default-state = "keep";
+			linux,default-trigger = "ide-disk1";
+		};
+
+		disk2_led {
+			label = "status:green:disk2_led";
+			gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
+			default-state = "keep";
+			linux,default-trigger = "ide-disk2";
+		};
+
+		disk1_fail_led {
+			label = "status:red:disk1_fail_led";
+			gpios = <&gpio0 23 GPIO_ACTIVE_LOW>;
+			default-state = "keep";
+		};
+
+		disk2_fail_led {
+			label = "status:red:disk2_fail_led";
+			gpios = <&gpio0 22 GPIO_ACTIVE_LOW>;
+			default-state = "keep";
+		};
+	};
+
+	gpio-keys {
+		compatible = "gpio-keys";
+		pinctrl-0 = < &pmx_button_power &pmx_button_reset >;
+		pinctrl-names = "default";
+
+		power-button {
+			label = "Power Button";
+			linux,code = <KEY_POWER>;
+			gpios = <&gpio1 4 GPIO_ACTIVE_LOW>;
+		};
+
+		reset-button {
+			label = "Reset Button";
+			linux,code = <KEY_RESTART>;
+			gpios = <&gpio1 6 GPIO_ACTIVE_LOW>;
+		};
+	};
+
+	gpio-poweroff {
+		compatible = "gpio-poweroff";
+		pinctrl-0 = <&pmx_poweroff>;
+		pinctrl-names = "default";
+		gpios = <&gpio1 8 GPIO_ACTIVE_HIGH>;
+	};
+};
+
+&nand {
+	status = "okay";
+	chip-delay = <40>;
+
+	partition@0 {
+		label = "u-boot";
+		reg = <0x0000000 0x0100000>;
+	};
+
+	partition@100000 {
+		label = "uImage";
+		reg = <0x0100000 0x0600000>;
+	};
+
+	partition@700000 {
+		label = "root";
+		reg = <0x0700000 0x0f900000>;
+	};
+};
+
+&mdio {
+	status = "okay";
+
+	ethphy0: ethernet-phy@8 { /* Marvell 88E1116R */
+		compatible = "marvell,88e1116";
+		reg = <8>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
diff -Naur a/arch/arm/boot/dts/kirkwood-nsa310b-lmsensor-redusbled.dts b/arch/arm/boot/dts/kirkwood-nsa310b-lmsensor-redusbled.dts
--- a/arch/arm/boot/dts/kirkwood-nsa310b-lmsensor-redusbled.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-nsa310b-lmsensor-redusbled.dts	2016-03-15 21:36:53.655348779 -0700
@@ -0,0 +1,132 @@
+/* Device tree file for the Zyxel NSA 310 NAS box.
+ *
+ * Copyright (c) 2016, bodhi <mibodhi@gmail.com>
+ *
+ * There are at least three different NSA310 designs. This 3rd variant has lm85 sensor
+ * and red USB Led.
+ */
+
+/dts-v1/;
+
+#include "kirkwood-nsa3x0-common.dtsi"
+
+/*
+ * There are at least two different NSA310 designs. This variant does
+ * not have the red USB Led.
+ */
+
+/ {
+	compatible = "zyxel,nsa310a", "zyxel,nsa310", "marvell,kirkwood-88f6281", "marvell,kirkwood";
+
+	memory {
+		device_type = "memory";
+		reg = <0x00000000 0x10000000>;
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200";
+		stdout-path = &uart0;
+	};
+
+	ocp@f1000000 {
+		pinctrl: pin-controller@10000 {
+			pinctrl-names = "default";
+
+			pmx_led_esata_green: pmx-led-esata-green {
+				marvell,pins = "mpp12";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_esata_red: pmx-led-esata-red {
+				marvell,pins = "mpp13";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_usb_green: pmx-led-usb-green {
+				marvell,pins = "mpp15";
+				marvell,function = "gpio";
+			};
+
+                        pmx_led_usb_red: pmx-led-usb-red {
+                                marvell,pins = "mpp16";
+                                marvell,function = "gpio";
+                        };
+
+			pmx_led_sys_green: pmx-led-sys-green {
+				marvell,pins = "mpp28";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_sys_red: pmx-led-sys-red {
+				marvell,pins = "mpp29";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_hdd_green: pmx-led-hdd-green {
+				marvell,pins = "mpp41";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_hdd_red: pmx-led-hdd-red {
+				marvell,pins = "mpp42";
+				marvell,function = "gpio";
+			};
+
+		};
+
+		i2c@11000 {
+			status = "okay";
+
+			lm85: lm85@2e {
+				compatible = "national,lm85";
+				reg = <0x2e>;
+			};
+		};
+	};
+
+	gpio-leds {
+		compatible = "gpio-leds";
+
+		green-sys {
+			label = "nsa310:green:sys";
+			gpios = <&gpio0 28 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "default-on";
+		};
+		red-sys {
+			label = "nsa310:red:sys";
+			gpios = <&gpio0 29 GPIO_ACTIVE_HIGH>;
+		};
+		green-hdd {
+			label = "nsa310:green:hdd";
+			gpios = <&gpio1 9 GPIO_ACTIVE_HIGH>;
+		};
+		red-hdd {
+			label = "nsa310:red:hdd";
+			gpios = <&gpio1 10 GPIO_ACTIVE_HIGH>;
+		};
+		green-esata {
+			label = "nsa310:green:esata";
+			gpios = <&gpio0 12 GPIO_ACTIVE_HIGH>;
+		};
+		red-esata {
+			label = "nsa310:red:esata";
+			gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;
+		};
+		green-usb {
+			label = "nsa310:green:usb";
+			gpios = <&gpio0 15 GPIO_ACTIVE_HIGH>;
+		};
+                red-usb {
+                        label = "nsa310:red:usb";
+                        gpios = <&gpio0 16 GPIO_ACTIVE_HIGH>;
+                };
+		green-copy {
+			label = "nsa310:green:copy";
+			gpios = <&gpio1 7 GPIO_ACTIVE_HIGH>;
+		};
+		red-copy {
+			label = "nsa310:red:copy";
+			gpios = <&gpio1 8 GPIO_ACTIVE_HIGH>;
+		};
+	};
+};
diff -Naur a/arch/arm/boot/dts/kirkwood-nsa310s.dts b/arch/arm/boot/dts/kirkwood-nsa310s.dts
--- a/arch/arm/boot/dts/kirkwood-nsa310s.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-nsa310s.dts	2016-03-19 02:08:27.009931499 -0700
@@ -0,0 +1,333 @@
+/* Device tree file for the Zyxel NSA 310S NAS box.
+ *
+ * Copyright (c) 2015-2016, bodhi <mibodhi@gmail.com>
+ *
+ * Based on 
+ * Copyright (c) 2014, Adam Baker <linux@baker-net.org.uk>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ *
+ * Based upon the board setup file created by Peter Schildmann */
+
+/dts-v1/;
+
+#include "kirkwood.dtsi"
+#include "kirkwood-6281.dtsi"
+
+/ {
+	model = "Zyxel NSA310S";
+	compatible = "zyxel,nsa320s", "marvell,kirkwood-88f6702", "marvell,kirkwood";
+
+	memory {
+		device_type = "memory";
+		reg = <0x00000000 0x10000000>;
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200";
+		stdout-path = &uart0;
+	};
+
+	mbus {
+		pcie-controller {
+			status = "okay";
+
+			pcie@1,0 {
+				status = "okay";
+			};
+		};
+	};
+
+	ocp@f1000000 {
+		pinctrl: pin-controller@10000 {
+			pinctrl-names = "default";
+
+			pmx_sata0: pmx-sata0 {
+				marvell,pins ; /* NA */
+				marvell,function = "sata0";
+			};
+
+			pmx_sata1: pmx-sata1 {
+				marvell,pins ; /* NA */
+				marvell,function = "sata1";
+			};
+
+                        pmx_usb_power: pmx-usb-power {
+                                marvell,pins = "mpp21"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_pwr_off: pmx-pwr-off {
+                                marvell,pins = "mpp27"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_btn_reset: pmx-btn-reset {
+                                marvell,pins = "mpp24"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_btn_copy: pmx-btn-copy {
+                                marvell,pins = "mpp25"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_btn_power: pmx-btn-power {
+                                marvell,pins = "mpp26"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+			pmx_led_hdd2_green: pmx-led-hdd2-green {
+				marvell,pins = "mpp34"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_hdd2_red: pmx-led-hdd2-red {
+				marvell,pins = "mpp12"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_usb_green: pmx-led-usb-green {
+				marvell,pins = "mpp15"; /* OK */
+				marvell,function = "gpio";
+			};
+
+                        pmx_led_copy_green: pmx-led-copy-green {
+                                marvell,pins = "mpp22"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_led_copy_red: pmx-led-copy-red {
+                                marvell,pins = "mpp23"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+			pmx_led_sys_green: pmx-led-sys-green {
+				marvell,pins = "mpp28"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_sys_orange: pmx-led-sys-orange {
+				marvell,pins = "mpp29"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_hdd1_green: pmx-led-hdd1-green {
+				marvell,pins = "mpp16"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_hdd1_red: pmx-led-hdd1-red {
+				marvell,pins = "mpp13"; /* OK */
+				marvell,function = "gpio";
+			};
+
+/*
+ 			pmx_buzzer: pmx-buzzer {
+ 				marvell,pins = "mpp20";
+ 				marvell,function = "gpio";
+ 			};
+*/
+
+			pmx_pwr_sata1: pmx-pwr-sata1 {
+				marvell,pins = "mpp33";
+				marvell,function = "gpio";
+			};
+		};
+
+                serial@12000 {
+                        status = "ok";
+                };
+
+                sata@80000 {
+                        status = "okay";
+                        nr-ports = <2>;
+                };
+
+		rtc@10300 {
+			status = "disabled";
+		};
+
+		i2c@11000 {
+			status = "okay";
+			ht1382: rtc@68 {
+				compatible = "htk,ht1382";
+				reg = <0x68>;
+			};
+		};
+	};
+
+	regulators {
+                compatible = "simple-bus";
+                #address-cells = <1>;
+                #size-cells = <0>;
+                pinctrl-names = "default";
+		pinctrl-0 = <&pmx_usb_power &pmx_pwr_sata1>;
+
+                usb0_power: regulator@1 {
+                        compatible = "regulator-fixed";
+                        reg = <1>;
+                        regulator-name = "USB Power";
+                        regulator-min-microvolt = <5000000>;
+                        regulator-max-microvolt = <5000000>;
+                        regulator-always-on;
+                        regulator-boot-on;
+			enable-active-high;
+                        gpio = <&gpio0 21 GPIO_ACTIVE_HIGH>;
+                };
+
+		sata1_power: regulator@2 {
+			compatible = "regulator-fixed";
+			reg = <2>;
+			regulator-name = "SATA1 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-always-on;
+			regulator-boot-on;
+			enable-active-high;
+			gpio = <&gpio1 1 GPIO_ACTIVE_HIGH>;
+		};
+	};
+
+        gpio_poweroff {
+                compatible = "gpio-poweroff";
+                pinctrl-0 = <&pmx_pwr_off>;
+                pinctrl-names = "default";
+                gpios = <&gpio0 27 GPIO_ACTIVE_HIGH>;
+        };
+
+        gpio_keys {
+                compatible = "gpio-keys";
+                #address-cells = <1>;
+                #size-cells = <0>;
+                pinctrl-0 = <&pmx_btn_reset &pmx_btn_copy &pmx_btn_power>;
+                pinctrl-names = "default";
+
+                button@1 {
+                        label = "Power Button";
+                        linux,code = <KEY_POWER>;
+                        gpios = <&gpio0 26 GPIO_ACTIVE_HIGH>;
+                };
+                button@2 {
+                        label = "Copy Button";
+                        linux,code = <KEY_COPY>;
+                        gpios = <&gpio0 25 GPIO_ACTIVE_LOW>;
+                };
+                button@3 {
+                        label = "Reset Button";
+                        linux,code = <KEY_RESTART>;
+                        gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;
+                };
+        };
+
+	gpio-leds {
+		compatible = "gpio-leds";
+		pinctrl-0 = <&pmx_led_hdd2_green &pmx_led_hdd2_red
+			     &pmx_led_usb_green
+			     &pmx_led_sys_green &pmx_led_sys_orange
+			     &pmx_led_copy_green &pmx_led_copy_red
+			     &pmx_led_hdd1_green &pmx_led_hdd1_red>;
+		pinctrl-names = "default";
+
+		green-sys {
+			label = "nsa310s:green:sys";
+			gpios = <&gpio0 28 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "default-on";
+		};
+		orange-sys {
+			label = "nsa310s:orange:sys";
+			gpios = <&gpio0 29 GPIO_ACTIVE_HIGH>;
+		};
+		green-hdd1 {
+			label = "nsa310s:green:hdd1";
+			gpios = <&gpio0 16 GPIO_ACTIVE_HIGH>;
+		};
+		red-hdd1 {
+			label = "nsa310s:red:hdd1";
+			gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;
+		};
+		green-hdd2 {
+			label = "nsa310s:green:hdd2";
+			gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
+		};
+		red-hdd2 {
+			label = "nsa310s:red:hdd2";
+			gpios = <&gpio0 12 GPIO_ACTIVE_HIGH>;
+		};
+		green-usb {
+			label = "nsa310s:green:usb";
+			gpios = <&gpio0 15 GPIO_ACTIVE_HIGH>;
+		};
+		green-copy {
+			label = "nsa310s:green:copy";
+			gpios = <&gpio0 22 GPIO_ACTIVE_HIGH>;
+			linux,default-trigger = "ide-disk";
+		};
+		red-copy {
+			label = "nsa310s:red:copy";
+			gpios = <&gpio0 23 GPIO_ACTIVE_HIGH>;
+		};
+	};
+};
+
+&nand {
+        status = "okay";
+        chip-delay = <35>;
+
+        partition@0 {
+                label = "uboot";
+                reg = <0x0000000 0x0100000>;
+                read-only;
+        };
+        partition@100000 {
+                label = "uboot_env";
+                reg = <0x0100000 0x0080000>;
+        };
+        partition@180000 {
+                label = "key_store";
+                reg = <0x0180000 0x0080000>;
+        };
+        partition@200000 {
+                label = "info";
+                reg = <0x0200000 0x0080000>;
+        };
+        partition@280000 {
+                label = "etc";
+                reg = <0x0280000 0x0a00000>;
+        };
+        partition@c80000 {
+                label = "kernel_1";
+                reg = <0x0c80000 0x0a00000>;
+        };
+        partition@1680000 {
+                label = "rootfs1";
+                reg = <0x1680000 0x2fc0000>;
+        };
+        partition@4640000 {
+                label = "kernel_2";
+                reg = <0x4640000 0x0a00000>;
+        };
+        partition@5040000 {
+                label = "rootfs2";
+                reg = <0x5040000 0x2fc0000>;
+        };
+};
+
+&mdio {
+	status = "okay";
+	ethphy0: ethernet-phy@1 {
+		compatible = "marvell,88e1318s";
+		reg = <1>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
+
diff -Naur a/arch/arm/boot/dts/kirkwood-nsa320.dts b/arch/arm/boot/dts/kirkwood-nsa320.dts
--- a/arch/arm/boot/dts/kirkwood-nsa320.dts	2016-03-13 21:28:54.000000000 -0700
+++ b/arch/arm/boot/dts/kirkwood-nsa320.dts	2016-03-13 22:15:22.720569953 -0700
@@ -193,10 +193,19 @@
 		};
 	};
 
+	nsa3xx-hwmon {
+		compatible = "zyxel,nsa320-mcu";
+		pinctrl-0 = <&pmx_mcu_data &pmx_mcu_clk &pmx_mcu_act>;
+		pinctrl-names = "default";
+
+		data-gpios = <&gpio0 14 GPIO_ACTIVE_HIGH>;
+		clk-gpios = <&gpio0 16 GPIO_ACTIVE_HIGH>;
+		act-gpios = <&gpio0 17 GPIO_ACTIVE_HIGH>;
+	};
+
 	/* The following pins are currently not assigned to a driver,
 	   some of them should be configured as inputs.
-	pinctrl-0 = <&pmx_mcu_data &pmx_mcu_clk &pmx_mcu_act
-		     &pmx_htp &pmx_vid_b1
+	pinctrl-0 = <&pmx_htp &pmx_vid_b1
 		     &pmx_power_resume_data &pmx_power_resume_clk>; */
 };
 
diff -Naur a/arch/arm/boot/dts/kirkwood-nsa320s.dts b/arch/arm/boot/dts/kirkwood-nsa320s.dts
--- a/arch/arm/boot/dts/kirkwood-nsa320s.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-nsa320s.dts	2016-03-19 03:09:01.483570850 -0700
@@ -0,0 +1,334 @@
+/* Device tree file for the Zyxel NSA 320S NAS box.
+ *
+ * Copyright (c) 2016, bodhi <mibodhi@gmail.com>
+ *
+ * Based on
+ * Copyright (c) 2014, Adam Baker <linux@baker-net.org.uk>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ *
+ * Based upon the board setup file created by Peter Schildmann */
+
+/dts-v1/;
+
+#include "kirkwood.dtsi"
+#include "kirkwood-6281.dtsi"
+
+/ {
+	model = "Zyxel NSA320S";
+	compatible = "zyxel,nsa320s", "marvell,kirkwood-88f6702", "marvell,kirkwood";
+
+	memory {
+		device_type = "memory";
+		reg = <0x00000000 0x10000000>;
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200";
+		stdout-path = &uart0;
+	};
+
+	mbus {
+		pcie-controller {
+			status = "okay";
+
+			pcie@1,0 {
+				status = "okay";
+			};
+		};
+	};
+
+	ocp@f1000000 {
+		pinctrl: pin-controller@10000 {
+			pinctrl-names = "default";
+
+			pmx_sata0: pmx-sata0 {
+				marvell,pins ; /* NA */
+				marvell,function = "sata0";
+			};
+
+			pmx_sata1: pmx-sata1 {
+				marvell,pins ; /* NA */
+				marvell,function = "sata1";
+			};
+
+                        pmx_usb_power: pmx-usb-power {
+                                marvell,pins = "mpp21"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_pwr_off: pmx-pwr-off {
+                                marvell,pins = "mpp27"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_btn_reset: pmx-btn-reset {
+                                marvell,pins = "mpp24"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_btn_copy: pmx-btn-copy {
+                                marvell,pins = "mpp25"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_btn_power: pmx-btn-power {
+                                marvell,pins = "mpp26"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+			pmx_led_hdd2_green: pmx-led-hdd2-green {
+				marvell,pins = "mpp34"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_hdd2_red: pmx-led-hdd2-red {
+				marvell,pins = "mpp12"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_usb_green: pmx-led-usb-green {
+				marvell,pins = "mpp15"; /* OK */
+				marvell,function = "gpio";
+			};
+
+                        pmx_led_copy_green: pmx-led-copy-green {
+                                marvell,pins = "mpp22"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+                        pmx_led_copy_red: pmx-led-copy-red {
+                                marvell,pins = "mpp23"; /* OK */
+                                marvell,function = "gpio";
+                        };
+
+			pmx_led_sys_green: pmx-led-sys-green {
+				marvell,pins = "mpp28"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_sys_orange: pmx-led-sys-orange {
+				marvell,pins = "mpp29"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_hdd1_green: pmx-led-hdd1-green {
+				marvell,pins = "mpp16"; /* OK */
+				marvell,function = "gpio";
+			};
+
+			pmx_led_hdd1_red: pmx-led-hdd1-red {
+				marvell,pins = "mpp13"; /* OK */
+				marvell,function = "gpio";
+			};
+
+/*
+			pmx_buzzer: pmx-buzzer {
+				marvell,pins = "mpp20";
+				marvell,function = "gpio";
+			};
+*/
+
+			pmx_pwr_sata1: pmx-pwr-sata1 {
+				marvell,pins = "mpp33";
+				marvell,function = "gpio";
+			};
+
+		};
+
+                serial@12000 {
+                        status = "ok";
+                };
+
+                sata@80000 {
+                        status = "okay";
+                        nr-ports = <2>;
+                };
+
+		rtc@10300 {
+			status = "disabled";
+		};
+
+		i2c@11000 {
+			status = "okay";
+			ht1382: rtc@68 {
+				compatible = "htk,ht1382";
+				reg = <0x68>;
+			};
+		};
+	};
+
+	regulators {
+                compatible = "simple-bus";
+                #address-cells = <1>;
+                #size-cells = <0>;
+                pinctrl-names = "default";
+		pinctrl-0 = <&pmx_usb_power &pmx_pwr_sata1>;
+
+                usb0_power: regulator@1 {
+                        compatible = "regulator-fixed";
+                        reg = <1>;
+                        regulator-name = "USB Power";
+                        regulator-min-microvolt = <5000000>;
+                        regulator-max-microvolt = <5000000>;
+                        regulator-always-on;
+                        regulator-boot-on;
+			enable-active-high;
+                        gpio = <&gpio0 21 GPIO_ACTIVE_HIGH>;
+                };
+
+		sata1_power: regulator@2 {
+			compatible = "regulator-fixed";
+			reg = <2>;
+			regulator-name = "SATA1 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-always-on;
+			regulator-boot-on;
+			enable-active-high;
+			gpio = <&gpio1 1 GPIO_ACTIVE_HIGH>;
+		};
+	};
+
+        gpio_poweroff {
+                compatible = "gpio-poweroff";
+                pinctrl-0 = <&pmx_pwr_off>;
+                pinctrl-names = "default";
+                gpios = <&gpio0 27 GPIO_ACTIVE_HIGH>;
+        };
+
+        gpio_keys {
+                compatible = "gpio-keys";
+                #address-cells = <1>;
+                #size-cells = <0>;
+                pinctrl-0 = <&pmx_btn_reset &pmx_btn_copy &pmx_btn_power>;
+                pinctrl-names = "default";
+
+                button@1 {
+                        label = "Power Button";
+                        linux,code = <KEY_POWER>;
+                        gpios = <&gpio0 26 GPIO_ACTIVE_HIGH>;
+                };
+                button@2 {
+                        label = "Copy Button";
+                        linux,code = <KEY_COPY>;
+                        gpios = <&gpio0 25 GPIO_ACTIVE_LOW>;
+                };
+                button@3 {
+                        label = "Reset Button";
+                        linux,code = <KEY_RESTART>;
+                        gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;
+                };
+        };
+
+	gpio-leds {
+		compatible = "gpio-leds";
+		pinctrl-0 = <&pmx_led_hdd2_green &pmx_led_hdd2_red
+			     &pmx_led_usb_green
+			     &pmx_led_sys_green &pmx_led_sys_orange
+			     &pmx_led_copy_green &pmx_led_copy_red
+			     &pmx_led_hdd1_green &pmx_led_hdd1_red>;
+		pinctrl-names = "default";
+
+		green-sys {
+			label = "nsa320s:green:sys";
+			gpios = <&gpio0 28 GPIO_ACTIVE_HIGH>;
+			linux,default-trigger = "timer";
+		};
+		orange-sys {
+			label = "nsa320s:orange:sys";
+			gpios = <&gpio0 29 GPIO_ACTIVE_HIGH>;
+		};
+		green-hdd1 {
+			label = "nsa320s:green:hdd1";
+			gpios = <&gpio0 16 GPIO_ACTIVE_HIGH>;
+		};
+		red-hdd1 {
+			label = "nsa320s:red:hdd1";
+			gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;
+		};
+		green-hdd2 {
+			label = "nsa320s:green:hdd2";
+			gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
+		};
+		red-hdd2 {
+			label = "nsa320s:red:hdd2";
+			gpios = <&gpio0 12 GPIO_ACTIVE_HIGH>;
+		};
+		green-usb {
+			label = "nsa320s:green:usb";
+			gpios = <&gpio0 15 GPIO_ACTIVE_HIGH>;
+		};
+		green-copy {
+			label = "nsa320s:green:copy";
+			gpios = <&gpio0 22 GPIO_ACTIVE_HIGH>;
+			linux,default-trigger = "ide-disk";
+		};
+		red-copy {
+			label = "nsa320s:red:copy";
+			gpios = <&gpio0 23 GPIO_ACTIVE_HIGH>;
+		};
+	};
+};
+
+&nand {
+        status = "okay";
+        chip-delay = <35>;
+
+        partition@0 {
+                label = "uboot";
+                reg = <0x0000000 0x0100000>;
+                read-only;
+        };
+        partition@100000 {
+                label = "uboot_env";
+                reg = <0x0100000 0x0080000>;
+        };
+        partition@180000 {
+                label = "key_store";
+                reg = <0x0180000 0x0080000>;
+        };
+        partition@200000 {
+                label = "info";
+                reg = <0x0200000 0x0080000>;
+        };
+        partition@280000 {
+                label = "etc";
+                reg = <0x0280000 0x0a00000>;
+        };
+        partition@c80000 {
+                label = "kernel_1";
+                reg = <0x0c80000 0x0a00000>;
+        };
+        partition@1680000 {
+                label = "rootfs1";
+                reg = <0x1680000 0x2fc0000>;
+        };
+        partition@4640000 {
+                label = "kernel_2";
+                reg = <0x4640000 0x0a00000>;
+        };
+        partition@5040000 {
+                label = "rootfs2";
+                reg = <0x5040000 0x2fc0000>;
+        };
+};
+
+&mdio {
+	status = "okay";
+	ethphy0: ethernet-phy@1 {
+                compatible = "marvell,88e1318s";
+		reg = <1>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
+
diff -Naur a/arch/arm/boot/dts/kirkwood-nsa325.dts b/arch/arm/boot/dts/kirkwood-nsa325.dts
--- a/arch/arm/boot/dts/kirkwood-nsa325.dts	2016-03-13 21:28:54.000000000 -0700
+++ b/arch/arm/boot/dts/kirkwood-nsa325.dts	2016-01-25 18:58:11.000000000 -0800
@@ -1,18 +1,11 @@
-/* Device tree file for the Zyxel NSA 325 NAS box.
- *
- * Copyright (c) 2015, Hans Ulli Kroll <ulli.kroll@googlemail.com>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version
- * 2 of the License, or (at your option) any later version.
- *
- * Based upon the board setup file created by Peter Schildmann
+/*
+ * Device tree file for Zyxel NSA 325 NAS
  */
 
 /dts-v1/;
 
-#include "kirkwood-nsa3x0-common.dtsi"
+#include "kirkwood.dtsi"
+#include "kirkwood-6282.dtsi"
 
 / {
 	model = "ZyXEL NSA325";
@@ -42,12 +35,12 @@
 		pinctrl: pin-controller@10000 {
 			pinctrl-names = "default";
 
-			pmx_led_hdd2_green: pmx-led-hdd2-green {
+			pmx_led_sata2_green: pmx-led-sata2-green {
 				marvell,pins = "mpp12";
-				marvell,function = "gpio";
+				marvell,function = "gpo";
 			};
 
-			pmx_led_hdd2_red: pmx-led-hdd2-red {
+			pmx_led_sata2_red: pmx-led-sata2-red {
 				marvell,pins = "mpp13";
 				marvell,function = "gpio";
 			};
@@ -72,6 +65,11 @@
 				marvell,function = "gpio";
 			};
 
+			pmx_usb_power_off: pmx-usb-power-off {
+				marvell,pins = "mpp21";
+				marvell,function = "gpio";
+			};
+
 			pmx_led_sys_green: pmx-led-sys-green {
 				marvell,pins = "mpp28";
 				marvell,function = "gpio";
@@ -82,42 +80,43 @@
 				marvell,function = "gpio";
 			};
 
-			pmx_led_hdd1_green: pmx-led-hdd1-green {
-				marvell,pins = "mpp41";
+			pmx_btn_reset: pmx-btn-reset {
+				marvell,pins = "mpp36";
 				marvell,function = "gpio";
 			};
 
-			pmx_led_hdd1_red: pmx-led-hdd1-red {
-				marvell,pins = "mpp42";
+			pmx_btn_copy: pmx-btn-copy {
+				marvell,pins = "mpp37";
 				marvell,function = "gpio";
 			};
 
-			pmx_htp: pmx-htp {
-				marvell,pins = "mpp43";
+			pmx_led_copy_green: pmx-led-copy-green {
+				marvell,pins = "mpp39";
 				marvell,function = "gpio";
 			};
 
-			/*
-			 * Buzzer needs to be switched at around 1kHz so is
-			 * not compatible with the gpio-beeper driver.
-			 */
-			pmx_buzzer: pmx-buzzer {
-				marvell,pins = "mpp44";
+			pmx_led_copy_red: pmx-led-copy-red {
+				marvell,pins = "mpp40";
+				marvell,function = "gpio";
+			};
+
+			pmx_led_sata1_green: pmx-led-sata1-green {
+				marvell,pins = "mpp41";
 				marvell,function = "gpio";
 			};
 
-			pmx_vid_b1: pmx-vid-b1 {
-				marvell,pins = "mpp45";
+			pmx_led_sata1_red: pmx-led-sata1-red {
+				marvell,pins = "mpp42";
 				marvell,function = "gpio";
 			};
 
-			pmx_power_resume_data: pmx-power-resume-data {
-				marvell,pins = "mpp47";
+			pmx_beeper: pmx-beeper {
+				marvell,pins = "mpp44";
 				marvell,function = "gpio";
 			};
 
-			pmx_power_resume_clk: pmx-power-resume-clk {
-				marvell,pins = "mpp49";
+			pmx_btn_power: pmx-btn-power {
+				marvell,pins = "mpp46";
 				marvell,function = "gpio";
 			};
 
@@ -125,6 +124,11 @@
 				marvell,pins = "mpp47";
 				marvell,function = "gpio";
 			};
+
+			pmx_pwr_off: pmx-pwr-off {
+				marvell,pins = "mpp48";
+				marvell,function = "gpio";
+			};
 		};
 
 		/* This board uses the pcf8563 RTC instead of the SoC RTC */
@@ -140,90 +144,208 @@
 				reg = <0x51>;
 			};
 		};
+
+		serial@12000 {
+			status = "ok";
+		};
+
+		sata@80000 {
+			status = "okay";
+			nr-ports = <2>;
+		};
 	};
 
-	regulators {
-		compatible = "simple-bus";
+	gpio_keys {
+		compatible = "gpio-keys";
 		#address-cells = <1>;
 		#size-cells = <0>;
-		pinctrl-0 = <&pmx_pwr_sata1>;
+		pinctrl-0 = <&pmx_btn_power &pmx_btn_copy &pmx_btn_reset>;
 		pinctrl-names = "default";
 
-		usb0_power: regulator@1 {
-			enable-active-high;
-		};
-
-		sata1_power: regulator@2 {
-			compatible = "regulator-fixed";
-			reg = <2>;
-			regulator-name = "SATA1 Power";
-			regulator-min-microvolt = <5000000>;
-			regulator-max-microvolt = <5000000>;
-			regulator-always-on;
-			regulator-boot-on;
-			enable-active-high;
-			gpio = <&gpio1 15 GPIO_ACTIVE_HIGH>;
+		button@1 {
+			label = "Power Button";
+			linux,code = <KEY_POWER>;
+			gpios = <&gpio1 14 GPIO_ACTIVE_HIGH>;
+		};
+
+		button@2 {
+			label = "Copy Button";
+			linux,code = <KEY_COPY>;
+			gpios = <&gpio1 5 GPIO_ACTIVE_LOW>;
+		};
+
+		button@3 {
+			label = "Reset Button";
+			linux,code = <KEY_RESTART>;
+			gpios = <&gpio1 4 GPIO_ACTIVE_LOW>;
 		};
 	};
 
 	gpio-leds {
 		compatible = "gpio-leds";
-		pinctrl-0 = <&pmx_led_hdd2_green &pmx_led_hdd2_red
-			     &pmx_led_usb_green
+		pinctrl-0 = <&pmx_led_sata1_green &pmx_led_sata1_red
+			     &pmx_led_sata2_green &pmx_led_sata2_red
 			     &pmx_led_sys_green &pmx_led_sys_orange
 			     &pmx_led_copy_green &pmx_led_copy_red
-			     &pmx_led_hdd1_green &pmx_led_hdd1_red>;
+			     &pmx_led_usb_green>;
 		pinctrl-names = "default";
 
-		green-sys {
-			label = "nsa325:green:sys";
-			gpios = <&gpio0 28 GPIO_ACTIVE_HIGH>;
-		};
-		orange-sys {
-			label = "nsa325:orange:sys";
-			gpios = <&gpio0 29 GPIO_ACTIVE_HIGH>;
-		};
-		green-hdd1 {
-			label = "nsa325:green:hdd1";
-			gpios = <&gpio1 9 GPIO_ACTIVE_HIGH>;
-		};
-		red-hdd1 {
-			label = "nsa325:red:hdd1";
-			gpios = <&gpio1 10 GPIO_ACTIVE_HIGH>;
-		};
-		green-hdd2 {
-			label = "nsa325:green:hdd2";
+		green-sata2 {
+			label = "nsa325:green:sata2";
 			gpios = <&gpio0 12 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "ide-disk2";
 		};
-		red-hdd2 {
-			label = "nsa325:red:hdd2";
+
+		red-sata2 {
+			label = "nsa325:red:sata2";
 			gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;
 		};
+
 		green-usb {
 			label = "nsa325:green:usb";
 			gpios = <&gpio0 15 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "usb-host";
+		};
+
+		green-sys {
+			label = "nsa325:green:sys";
+			gpios = <&gpio0 28 GPIO_ACTIVE_HIGH>;
+			linux,default-trigger = "default-on";
 		};
+
+		orange-sys {
+			label = "nsa325:orange:sys";
+			gpios = <&gpio0 29 GPIO_ACTIVE_HIGH>;
+			linux,default-trigger = "cpu0";
+		};
+
 		green-copy {
 			label = "nsa325:green:copy";
 			gpios = <&gpio1 7 GPIO_ACTIVE_HIGH>;
 		};
+
 		red-copy {
 			label = "nsa325:red:copy";
 			gpios = <&gpio1 8 GPIO_ACTIVE_HIGH>;
 		};
 
-	/* The following pins are currently not assigned to a driver,
-	   some of them should be configured as inputs.
-	pinctrl-0 = <&pmx_mcu_data &pmx_mcu_clk &pmx_mcu_act
-		     &pmx_htp &pmx_vid_b1
-		     &pmx_power_resume_data &pmx_power_resume_clk>; */
+		green-sata1 {
+			label = "nsa325:green:sata1";
+			gpios = <&gpio1 9 GPIO_ACTIVE_HIGH>;
+			linux,default-trigger = "ide-disk1";
+		};
+
+		red-sata1 {
+			label = "nsa325:red:sata1";
+			gpios = <&gpio1 10 GPIO_ACTIVE_HIGH>;
+		};
+	};
+
+	gpio_poweroff {
+		compatible = "gpio-poweroff";
+		pinctrl-0 = <&pmx_pwr_off>;
+		pinctrl-names = "default";
+		gpios = <&gpio1 16 GPIO_ACTIVE_HIGH>;
+	};
+
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-0 = <&pmx_mcu_data &pmx_usb_power_off &pmx_pwr_sata1>;
+		pinctrl-names = "default";
+
+/*
+		watchdog_data: regulator@1 {
+			compatible = "regulator-fixed";
+			regulator-name = "Watchdog Data";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 14 GPIO_ACTIVE_HIGH>;
+		};
+*/
+
+		usb_power: regulator@2 {
+			compatible = "regulator-fixed";
+			reg = <2>;
+			regulator-name = "USB Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-always-on;
+			regulator-boot-on;
+			enable-active-high;
+			gpio = <&gpio0 21 GPIO_ACTIVE_HIGH>;
+		};
+
+		sata1_power: regulator@3 {
+			compatible = "regulator-fixed";
+			reg = <3>;
+			regulator-name = "SATA1 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-always-on;
+			regulator-boot-on;
+			enable-active-high;
+			gpio = <&gpio1 15 GPIO_ACTIVE_HIGH>;
+		};
+	};
+};
+
+&nand {
+	status = "okay";
+	chip-delay = <35>;
+
+	partition@0 {
+		label = "uboot";
+		reg = <0x0000000 0x0100000>;
 	};
 
+	partition@100000 {
+		label = "uboot_env";
+		reg = <0x0100000 0x0080000>;
+	};
 
+	partition@180000 {
+		label = "key_store";
+		reg = <0x0180000 0x0080000>;
+	};
+
+	partition@200000 {
+		label = "info";
+		reg = <0x0200000 0x0080000>;
+	};
+
+	partition@280000 {
+		label = "etc";
+		reg = <0x0280000 0x0a00000>;
+	};
+
+	partition@c80000 {
+		label = "kernel_1";
+		reg = <0x0c80000 0x0a00000>;
+	};
+
+	partition@1680000 {
+		label = "rootfs1";
+		reg = <0x1680000 0x2fc0000>;
+	};
+
+	partition@4640000 {
+		label = "kernel_2";
+		reg = <0x4640000 0x0a00000>;
+	};
+
+	partition@5040000 {
+		label = "rootfs2";
+		reg = <0x5040000 0x2fc0000>;
+	};
 };
 
 &mdio {
 	status = "okay";
+
 	ethphy0: ethernet-phy@1 {
 		reg = <1>;
 	};
@@ -231,8 +353,8 @@
 
 &eth0 {
 	status = "okay";
+
 	ethernet0-port@0 {
 		phy-handle = <&ethphy0>;
 	};
 };
-
diff -Naur a/arch/arm/boot/dts/kirkwood-pogo_e02.dts b/arch/arm/boot/dts/kirkwood-pogo_e02.dts
--- a/arch/arm/boot/dts/kirkwood-pogo_e02.dts	2016-03-13 21:28:54.000000000 -0700
+++ b/arch/arm/boot/dts/kirkwood-pogo_e02.dts	2016-03-13 22:15:36.310554414 -0700
@@ -1,26 +1,11 @@
-/*
- * kirkwood-pogo_e02.dts - Device tree file for Pogoplug E02
- *
- * Copyright (C) 2015 Christoph Junghans <ottxor@gentoo.org>
- *
- * based on information of dts files from
- *  Arch Linux ARM by Oleg Rakhmanov <moonman.ca@gmail.com>
- *  OpenWrt by Felix Kaechele <heffer@fedoraproject.org>
- *
- * This file is licensed under the terms of the GNU General Public
- * License version 2.  This program is licensed "as is" without any
- * warranty of any kind, whether express or implied.
- */
-
 /dts-v1/;
 
 #include "kirkwood.dtsi"
 #include "kirkwood-6281.dtsi"
 
 / {
-	model = "Cloud Engines Pogoplug E02";
-	compatible = "cloudengines,pogoe02", "marvell,kirkwood-88f6281",
-		     "marvell,kirkwood";
+	model = "CloudEngines Pogoplug E02";
+	compatible = "cloudengines,pogo_e02", "marvell,kirkwood-88f6281", "marvell,kirkwood";
 
 	memory {
 		device_type = "memory";
@@ -28,24 +13,47 @@
 	};
 
 	chosen {
-		bootargs = "console=ttyS0,115200n8";
+		bootargs = "console=ttyS0,115200n8 earlyprintk root=/dev/sda1 rootdelay=10";
 		stdout-path = &uart0;
 	};
 
-	gpio-leds {
-		compatible = "gpio-leds";
-
-		health {
-			label = "pogo_e02:green:health";
-			gpios = <&gpio1 16 GPIO_ACTIVE_LOW>;
-			default-state = "keep";
+       ocp@f1000000 {
+               pinctrl: pin-controller@10000 {
+                       pmx_usb_power_enable: pmx-usb-power-enable {
+                               marvell,pins = "mpp29";
+                               marvell,function = "gpio";
+                       };
+                       pmx_led_green: pmx-led_green {
+                               marvell,pins = "mpp48";
+                               marvell,function = "gpio";
+                       };
+                       pmx_led_orange: pmx-led_orange {
+                               marvell,pins = "mpp49";
+                               marvell,function = "gpio";
+                       };
 		};
-		fault {
-			label = "pogo_e02:orange:fault";
-			gpios = <&gpio1 17 GPIO_ACTIVE_LOW>;
+		serial@12000 {
+			status = "ok";
 		};
-	};
 
+	};
+       gpio-leds {
+               compatible = "gpio-leds";
+               pinctrl-0 = < &pmx_led_orange
+                             &pmx_led_green
+                           >;
+               pinctrl-names = "default";
+
+               health {
+                       label = "status:green:health";
+                       gpios = <&gpio1 16 GPIO_ACTIVE_LOW>;
+                       default-state = "keep";
+               };
+               fault {
+                       label = "status:orange:fault";
+                       gpios = <&gpio1 17 GPIO_ACTIVE_LOW>;
+               };
+	};
 	regulators {
 		compatible = "simple-bus";
 		#address-cells = <1>;
@@ -67,31 +75,6 @@
 	};
 };
 
-&pinctrl {
-	pinctrl-0 = < &pmx_usb_power_enable &pmx_led_orange
-		      &pmx_led_green >;
-	pinctrl-names = "default";
-
-	pmx_usb_power_enable: pmx-usb-power-enable {
-		marvell,pins = "mpp29";
-		marvell,function = "gpio";
-	};
-
-	pmx_led_green: pmx-led-green {
-		marvell,pins = "mpp48";
-		marvell,function = "gpio";
-	};
-
-	pmx_led_orange: pmx-led-orange {
-		marvell,pins = "mpp49";
-		marvell,function = "gpio";
-	};
-};
-
-&uart0 {
-	status = "okay";
-};
-
 &nand {
 	chip-delay = <40>;
 	status = "okay";
@@ -104,17 +87,17 @@
 
 	partition@100000 {
 		label = "uImage";
-		reg = <0x0100000 0x400000>;
+		reg = <0x0100000 0x0500000>;
 	};
 
-	partition@500000 {
-		label = "pogoplug";
-		reg = <0x0500000 0x2000000>;
-	};
+        partition@0500000 {
+                label = "pogoplug";
+                reg = <0x0500000 0x2500000>;
+        };
 
 	partition@2500000 {
 		label = "root";
-		reg = <0x02500000 0x5b00000>;
+		reg = <0x2500000 0x6c00000>;
 	};
 };
 
diff -Naur a/arch/arm/boot/dts/kirkwood-pogoplug_v4.dts b/arch/arm/boot/dts/kirkwood-pogoplug_v4.dts
--- a/arch/arm/boot/dts/kirkwood-pogoplug_v4.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-pogoplug_v4.dts	2016-03-13 22:15:36.310554414 -0700
@@ -0,0 +1,164 @@
+/dts-v1/;
+
+#include "kirkwood.dtsi"
+#include "kirkwood-6192.dtsi"
+
+/ {
+	model = "Pogoplug v4";
+	compatible = "cloudengines,pogoplug-v4", "cloudengines,pogoplug-mobile", "marvell,kirkwood-88f6192", "marvell,kirkwood";
+
+	memory {
+		device_type = "memory";
+		reg = <0x00000000 0x8000000>;
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200";
+		stdout-path = &uart0;
+	};
+
+	mbus {
+		pcie-controller {
+			status = "okay";
+
+			pcie@1,0 {
+				status = "okay";
+			};
+		};
+	};
+
+	ocp@f1000000 {
+		pinctrl: pin-controller@10000 {
+			pmx_led_green: pmx-led-green {
+				marvell,pins = "mpp22";
+				marvell,function = "gpio";
+			};
+			pmx_led_red: pmx-led-red {
+				marvell,pins = "mpp24";
+				marvell,function = "gpio";
+			};
+			pmx_button_eject: pmx-button-eject {
+				marvell,pins = "mpp29";
+				marvell,function = "gpio";
+			};
+			/*pmx_usb_power_enable: pmx-usb-power-enable {
+				marvell,pins = "mpp29";
+				marvell,function = "gpio";
+			};*/
+		};
+
+		serial@12000 {
+			status = "ok";
+		};
+
+		sata@80000 {
+			status = "okay";
+			nr-ports = <1>;
+			phys = <&sata_phy0>;
+			phy-names = "port0";
+		};
+
+		mvsdio@90000 {
+			pinctrl-0 = <&pmx_sdio>;
+			pinctrl-names = "default";
+			status = "okay";
+			cd-gpios = <&gpio0 27 GPIO_ACTIVE_HIGH>;
+			/* No WP GPIO */
+		};
+	};
+
+	gpio-leds {
+		compatible = "gpio-leds";
+		pinctrl-0 = <&pmx_led_red &pmx_led_green>;
+		pinctrl-names = "default";
+
+		health {
+			label = "status:green:health";
+			gpios = <&gpio0 22 GPIO_ACTIVE_LOW>;
+			default-state = "keep";
+		};
+		fault {
+			label = "status:red:fault";
+			gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;
+		};
+	};
+
+	gpio_keys {
+		compatible = "gpio-keys";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-0 = <&pmx_button_eject>;
+		pinctrl-names = "default";
+
+		button@1 {
+			label = "Eject Button";
+			linux,code = <KEY_EJECTCD>;
+			gpios = <&gpio0 29 GPIO_ACTIVE_LOW>;
+		};
+	};
+
+	/*regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-0 = <&pmx_usb_power_enable>;
+		pinctrl-names = "default";
+
+		usb_power: regulator@1 {
+			compatible = "regulator-fixed";
+			reg = <1>;
+			regulator-name = "USB Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 29 GPIO_ACTIVE_HIGH>;
+		};
+	};*/
+};
+
+&nand {
+	status = "okay";
+
+	partition@0 {
+		label = "u-boot";
+		reg = <0x0000000 0x200000>;
+		read-only;
+	};
+
+	partition@200000 {
+		label = "uImage";
+		reg = <0x200000 0x300000>;
+	};
+
+	partition@500000 {
+		label = "uImage2";
+		reg = <0x500000 0x300000>;
+	};
+
+	partition@800000 {
+		label = "failsafe";
+		reg = <0x800000 0x800000>;
+	};
+
+	partition@1000000 {
+		label = "root";
+		reg = <0x1000000 0x7000000>;
+	};
+};
+
+&mdio {
+	status = "okay";
+
+	ethphy0: ethernet-phy@0 {
+		reg = <0>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
diff -Naur a/arch/arm/boot/dts/kirkwood-qizhitong_501m_v2.dts b/arch/arm/boot/dts/kirkwood-qizhitong_501m_v2.dts
--- a/arch/arm/boot/dts/kirkwood-qizhitong_501m_v2.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-qizhitong_501m_v2.dts	2016-03-13 22:15:36.320554403 -0700
@@ -0,0 +1,128 @@
+/* Device tree file for the QiZhiTong 501M V2 box.
+ *
+ * Copyright (c) 2015, bodhi <mibodhix@gmail.com>
+ * Copyright (c) 2015, wacke <cao88yu@gmail.com>
+ *
+ * Based on
+ * Marvell RD88F6181 A Board descrition
+ * Andrew Lunn <andrew@lunn.ch>
+*/
+
+/dts-v1/;
+#include "kirkwood-rd88f6281.dtsi"
+
+/ {
+	model = "QiZhiTong 501M V2";
+	compatible = "qizhitong,501m_v2","marvell,rd88f6281-a", "marvell,rd88f6281","marvell,kirkwood-88f6281", "marvell,kirkwood";
+
+	chosen {
+		bootargs = "console=ttyS0,9600n8 earlyprintk";
+	};
+
+	mbus {
+		pcie-controller {
+			status = "okay";
+
+			pcie@1,0 {
+				status = "okay";
+			};
+		};
+	};
+
+	ocp@f1000000 {
+		pinctrl: pin-controller@10000 {
+			pinctrl-names = "default";
+
+			pmx_sdio_cd: pmx-sdio-cd {
+				marvell,pins = "mpp28";
+				marvell,function = "gpio";
+			};
+		};
+
+		serial@12000 {
+			status = "okay";
+
+		};
+
+		sata@80000 {
+			status = "okay";
+			nr-ports = <1>;
+		};
+		mvsdio@90000 {
+			pinctrl-0 = <&pmx_sdio &pmx_sdio_cd>;
+			pinctrl-names = "default";
+			status = "okay";
+			cd-gpios = <&gpio0 28 GPIO_ACTIVE_HIGH>;
+			/* No WP GPIO */
+		};
+	};
+	
+	dsa@0 {
+		compatible = "marvell,dsa";
+		#address-cells = <2>;
+		#size-cells = <0>;
+		
+		interrupts = <10>;
+		dsa,ethernet = <&eth0port>;
+		dsa,mii-bus = <&mdio>;
+
+		switch@0 {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			status = "okay";
+			reg = <10 0>;
+			
+			port@0 {
+				reg = <0>;
+				label = "lan1";
+			};
+
+			port@1 {
+			       reg = <1>;
+			       label = "lan2";
+			};
+
+			port@2 {
+			       reg = <2>;
+			       label = "lan3";
+			};
+
+			port@3 {
+			       reg = <3>;
+			       label = "lan4";
+			};
+
+			port@4 {
+				reg = <4>;
+				label = "aux";
+			};
+
+			port@5 {
+			       reg = <5>;
+			       label = "cpu";
+			};
+		};
+	};
+};
+
+&mdio {
+	status = "okay";
+	ethphy1: ethernet-phy@1 {
+		device_type = "ethernet-phy";
+        /* overwrite reg property in board file */
+	};
+};
+
+&eth0 {
+	status = "okay";	
+	ethernet0-port@0 {
+	};
+};
+
+&eth1 {
+	status = "okay";	
+	ethernet1-port@0 {
+		phy-handle = <&ethphy1>;
+	};
+};
+
diff -Naur a/arch/arm/boot/dts/kirkwood-t5325.dts b/arch/arm/boot/dts/kirkwood-t5325.dts
--- a/arch/arm/boot/dts/kirkwood-t5325.dts	2016-03-13 21:28:54.000000000 -0700
+++ b/arch/arm/boot/dts/kirkwood-t5325.dts	2016-03-08 03:41:22.406268638 -0800
@@ -184,9 +184,21 @@
 		compatible = "gpio-poweroff";
 		pinctrl-0 = <&pmx_power_off>;
 		pinctrl-names = "default";
-		gpios = <&gpio1 17 GPIO_ACTIVE_HIGH>;
+		gpios = <&gpio1 16 GPIO_ACTIVE_HIGH>;
 	};
 
+        gpio-leds {
+                compatible = "gpio-leds";
+                pinctrl-0 = <&pmx_led>;
+                pinctrl-names = "default";
+
+                health {
+                        label = "status:green:health";
+                        gpios = <&gpio0 21 GPIO_ACTIVE_HIGH>;
+                        default-state = "keep";
+                };
+        };
+
 	sound {
 		compatible = "simple-audio-card";
 		simple-audio-card,format = "i2s";
diff -Naur a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
--- a/arch/arm/boot/dts/Makefile	2016-03-13 21:28:54.000000000 -0700
+++ b/arch/arm/boot/dts/Makefile	2016-03-15 02:54:32.674098647 -0700
@@ -157,8 +157,8 @@
 	k2hk-evm.dtb \
 	k2l-evm.dtb \
 	k2e-evm.dtb
-dtb-$(CONFIG_MACH_KIRKWOOD) += \
-	kirkwood-b3.dtb \
+dtb-$(CONFIG_MACH_KIRKWOOD) += kirkwood-b3.dtb \
+	kirkwood-asus_m25.dtb \
 	kirkwood-blackarmor-nas220.dtb \
 	kirkwood-cloudbox.dtb \
 	kirkwood-d2net.dtb \
@@ -181,11 +181,13 @@
 	kirkwood-ds411.dtb \
 	kirkwood-ds411j.dtb \
 	kirkwood-ds411slim.dtb \
+	kirkwood-goflexhome.dtb \
 	kirkwood-goflexnet.dtb \
 	kirkwood-guruplug-server-plus.dtb \
 	kirkwood-ib62x0.dtb \
 	kirkwood-iconnect.dtb \
 	kirkwood-iomega_ix2_200.dtb \
+	kirkwood-iomega_ix4_200d.dtb \
 	kirkwood-is2.dtb \
 	kirkwood-km_kirkwood.dtb \
 	kirkwood-laplug.dtb \
@@ -200,12 +202,18 @@
 	kirkwood-net5big.dtb \
 	kirkwood-netgear_readynas_duo_v2.dtb \
 	kirkwood-netgear_readynas_nv+_v2.dtb \
+	kirkwood-netgear_stora_ms2000.dtb \
+	kirkwood-n1t1.dtb \
 	kirkwood-ns2.dtb \
 	kirkwood-ns2lite.dtb \
 	kirkwood-ns2max.dtb \
 	kirkwood-ns2mini.dtb \
 	kirkwood-nsa310.dtb \
 	kirkwood-nsa310a.dtb \
+	kirkwood-nsa310b-lmsensor-redusbled.dtb \
+        kirkwood-nsa310s.dtb \
+        kirkwood-nsa320.dtb \
+	kirkwood-nsa320s.dtb \
 	kirkwood-nsa325.dtb \
 	kirkwood-openblocks_a6.dtb \
 	kirkwood-openblocks_a7.dtb \
@@ -213,7 +221,8 @@
 	kirkwood-openrd-client.dtb \
 	kirkwood-openrd-ultimate.dtb \
 	kirkwood-pogo_e02.dtb \
-	kirkwood-pogoplug-series-4.dtb \
+        kirkwood-pogoplug_v4.dtb \
+	kirkwood-qizhitong_501m_v2.dtb \
 	kirkwood-rd88f6192.dtb \
 	kirkwood-rd88f6281-z0.dtb \
 	kirkwood-rd88f6281-a.dtb \
diff -Naur a/arch/arm/plat-orion/common.c b/arch/arm/plat-orion/common.c
--- a/arch/arm/plat-orion/common.c	2016-03-13 21:28:54.000000000 -0700
+++ b/arch/arm/plat-orion/common.c	2016-03-13 22:15:36.350554369 -0700
@@ -252,7 +252,9 @@
 /*****************************************************************************
  * GE00
  ****************************************************************************/
-static struct mv643xx_eth_shared_platform_data orion_ge00_shared_data;
+struct mv643xx_eth_shared_platform_data orion_ge00_shared_data = {
+	.tx_csum_limit	= 1600,
+};
 
 static struct resource orion_ge00_shared_resources[] = {
 	{
diff -Naur a/arch/arm/tools/mach-types b/arch/arm/tools/mach-types
--- a/arch/arm/tools/mach-types	2016-03-13 21:28:54.000000000 -0700
+++ b/arch/arm/tools/mach-types	2016-03-13 22:54:54.997846779 -0700
@@ -118,6 +118,7 @@
 omap_osk		MACH_OMAP_OSK		OMAP_OSK		515
 tosa			MACH_TOSA		TOSA			520
 avila			MACH_AVILA		AVILA			526
+n1t1            MACH_N1T1       N1T1            527
 edb9302			MACH_EDB9302		EDB9302			538
 husky			MACH_HUSKY		HUSKY			543
 shepherd		MACH_SHEPHERD		SHEPHERD		545
@@ -1006,3 +1007,13 @@
 eukrea_cpuimx28sd	MACH_EUKREA_CPUIMX28SD	EUKREA_CPUIMX28SD	4573
 domotab			MACH_DOMOTAB		DOMOTAB			4574
 pfla03			MACH_PFLA03		PFLA03			4575
+goflexnet		MACH_GOFLEXNET		GOFLEXNET		3089
+goflexhome		MACH_GOFLEXHOME		GOFLEXHOME		3338
+iconnect		MACH_ICONNECT		ICONNECT		2870
+pogo_e02		MACH_POGO_E02		POGO_E02		3542
+nsa320			MACH_NSA320		NSA320			3956
+pogoplugv4		MACH_POGOPLUGV4		POGOPLUGV4		3960
+pogoplugv3		MACH_POGOPLUGV3		POGOPLUGV3		3973
+pogoplugv3pci		MACH_POGOPLUGV3PCI	POGOPLUGV3PCI		3976
+nsa310			MACH_NSA310		NSA310			4022
+nsa310s                 MACH_NSA310S            NSA310S                 4931
diff -Naur a/drivers/ata/sata_mv.c b/drivers/ata/sata_mv.c
--- a/drivers/ata/sata_mv.c	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/ata/sata_mv.c	2016-03-13 22:15:36.430554277 -0700
@@ -1,6 +1,7 @@
 /*
  * sata_mv.c - Marvell SATA support
  *
+ * Copyright 2013 bodhi <mibodhi@gmail.com>
  * Copyright 2008-2009: Marvell Corporation, all rights reserved.
  * Copyright 2005: EMC Corporation, all rights reserved.
  * Copyright 2005 Red Hat, Inc.  All rights reserved.
@@ -72,6 +73,7 @@
 #include <scsi/scsi_cmnd.h>
 #include <scsi/scsi_device.h>
 #include <linux/libata.h>
+#include <linux/leds.h>
 
 #define DRV_NAME	"sata_mv"
 #define DRV_VERSION	"1.28"
@@ -1175,6 +1177,8 @@
 {
 	int want_ncq = (protocol == ATA_PROT_NCQ);
 
+        ledtrig_ide_activity(ap->port_no);
+
 	if (pp->pp_flags & MV_PP_FLAG_EDMA_EN) {
 		int using_ncq = ((pp->pp_flags & MV_PP_FLAG_NCQ_EN) != 0);
 		if (want_ncq != using_ncq)
diff -Naur a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
--- a/drivers/hwmon/Kconfig	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/hwmon/Kconfig	2016-03-13 22:15:36.440554266 -0700
@@ -1747,6 +1747,19 @@
 	  This driver provides support for the Ultra45 workstation environmental
 	  sensors.
 
+config SENSORS_NSA3XX
+	tristate "ZyXEL NSA3xx fan speed and temperature sensors"
+	depends on GPIOLIB
+	help
+	  If you say yes here you get support for hardware monitoring
+	  for the ZyXEL NSA3XX Media Servers.
+
+	  The sensor data is taken from a Holtek HT46R065 microcontroller
+	  connected to GPIO lines.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called nsa3xx-hwmon.
+
 if ACPI
 
 comment "ACPI drivers"
diff -Naur a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
--- a/drivers/hwmon/Makefile	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/hwmon/Makefile	2016-03-13 22:15:36.440554266 -0700
@@ -117,6 +117,7 @@
 obj-$(CONFIG_SENSORS_MAX6697)	+= max6697.o
 obj-$(CONFIG_SENSORS_MAX31790)	+= max31790.o
 obj-$(CONFIG_SENSORS_MC13783_ADC)+= mc13783-adc.o
+obj-$(CONFIG_SENSORS_NSA3XX)	+= nsa3xx-hwmon.o
 obj-$(CONFIG_SENSORS_MCP3021)	+= mcp3021.o
 obj-$(CONFIG_SENSORS_MENF21BMC_HWMON) += menf21bmc_hwmon.o
 obj-$(CONFIG_SENSORS_NCT6683)	+= nct6683.o
diff -Naur a/drivers/hwmon/nsa3xx-hwmon.c b/drivers/hwmon/nsa3xx-hwmon.c
--- a/drivers/hwmon/nsa3xx-hwmon.c	1969-12-31 16:00:00.000000000 -0800
+++ b/drivers/hwmon/nsa3xx-hwmon.c	2016-03-13 22:15:36.450554254 -0700
@@ -0,0 +1,353 @@
+/*
+ * drivers/hwmon/nsa3xx-hwmon.c
+ *
+ * ZyXEL NSA3xx Media Servers
+ * hardware monitoring
+ *
+ * Copyright (C) 2012 Peter Schildmann <linux@schildmann.info>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License v2 as published by the
+ * Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
+ */
+
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/platform_data/nsa3xx-hwmon.h>
+#include <linux/slab.h>
+#include <linux/jiffies.h>
+#include <linux/delay.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/of_gpio.h>
+#include <asm/delay.h>
+
+#define MAGIC_NUMBER 0x55
+#define DRVNAME "nsa3xx-hwmon"
+
+struct nsa3xx_hwmon {
+	struct platform_device	*pdev;
+	struct device		*classdev;
+	struct mutex		update_lock;	/* lock GPIO operations */
+	unsigned long		last_updated;	/* jiffies */
+	unsigned long		mcu_data;
+        struct gpio_mcu_data    *data;
+};
+
+enum nsa3xx_inputs {
+	NSA3XX_FAN = 1,
+	NSA3XX_TEMP = 0,
+};
+
+static const char *nsa3xx_input_names[] = {
+	[NSA3XX_FAN] = "Chassis Fan",
+	[NSA3XX_TEMP] = "System Temperature",
+};
+
+static unsigned long nsa3xx_hwmon_update(struct device *dev)
+{
+	int i;
+	unsigned long mcu_data;
+	struct nsa3xx_hwmon *hwmon = dev_get_drvdata(dev);
+	struct nsa3xx_hwmon_platform_data *pdata = hwmon->pdev->dev.platform_data;
+	mutex_lock(&hwmon->update_lock);
+
+	mcu_data = hwmon->mcu_data;
+
+	if (time_after(jiffies, hwmon->last_updated + (3 * HZ)) || mcu_data == 0) {
+		dev_dbg(dev, "Reading MCU data\n");
+
+		gpio_set_value(pdata->act_pin, 0);
+		dev_dbg(dev, "gpio set value MCU act pin 0\n");
+		msleep(100);
+
+		for (i = 31; i >= 0; i--) {
+			gpio_set_value(pdata->clk_pin, 0);
+			udelay(100);
+
+			gpio_set_value(pdata->clk_pin, 1);
+			udelay(100);
+
+			mcu_data |= gpio_get_value(pdata->data_pin) ? (1 << i) : 0;
+		}
+
+		gpio_set_value(pdata->act_pin, 1);
+		dev_dbg(dev, "gpio set value MCU act pin 1\n");
+
+		if ((mcu_data & 0xff000000) != (MAGIC_NUMBER << 24)) {
+			dev_err(dev, "Failed to read MCU data\n");
+			mcu_data = 0;
+		}
+
+		hwmon->mcu_data = mcu_data;
+		hwmon->last_updated = jiffies;
+	}
+
+	mutex_unlock(&hwmon->update_lock);
+
+	return mcu_data;
+}
+
+static ssize_t show_name(struct device *dev,
+			 struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "nsa3xx\n");
+}
+
+static ssize_t show_label(struct device *dev,
+			  struct device_attribute *attr, char *buf)
+{
+	int channel = to_sensor_dev_attr(attr)->index;
+	return sprintf(buf, "%s\n", nsa3xx_input_names[channel]);
+}
+
+static ssize_t show_value(struct device *dev,
+			  struct device_attribute *attr, char *buf)
+{
+	int channel = to_sensor_dev_attr(attr)->index;
+	unsigned long mcu_data = nsa3xx_hwmon_update(dev);
+	unsigned long value = 0;
+	pr_debug("channel value 0x%02x!\n", channel);
+	switch(channel) {
+	case NSA3XX_TEMP:
+		value = (mcu_data & 0xffff) * 100;
+		break;
+	case NSA3XX_FAN:
+		value = ((mcu_data & 0xff0000) >> 16) * 100;
+		break;
+	}
+	return sprintf(buf, "%lu\n", value);
+}
+
+static DEVICE_ATTR(name, S_IRUGO, show_name, NULL);
+static SENSOR_DEVICE_ATTR(temp1_label, S_IRUGO, show_label, NULL, NSA3XX_TEMP);
+static SENSOR_DEVICE_ATTR(temp1_input, S_IRUGO, show_value, NULL, NSA3XX_TEMP);
+static SENSOR_DEVICE_ATTR(fan1_label, S_IRUGO, show_label, NULL, NSA3XX_FAN);
+static SENSOR_DEVICE_ATTR(fan1_input, S_IRUGO, show_value, NULL, NSA3XX_FAN);
+
+static struct attribute *nsa3xx_attributes[] = {
+	&dev_attr_name.attr,
+	&sensor_dev_attr_temp1_label.dev_attr.attr,
+	&sensor_dev_attr_temp1_input.dev_attr.attr,
+	&sensor_dev_attr_fan1_label.dev_attr.attr,
+	&sensor_dev_attr_fan1_input.dev_attr.attr,
+	NULL
+};
+
+/*
+ * Helper to import hardware characteristics from .dts file and push
+ * those to the chip.
+ */
+
+#ifdef CONFIG_OF_GPIO
+
+/*
+ * Translate OpenFirmware node properties into platform_data
+ */
+static int nsa3xx_hwmon_get_of_pdata(struct device *dev,
+                            struct nsa3xx_hwmon_platform_data *pdata)
+{
+	int nb;
+	struct device_node *node = dev->of_node;
+	struct property *prop;
+	int val1,val2,val3;
+	enum of_gpio_flags flags;
+	unsigned i;
+
+        /* Find mcu-data node to read out temp and rpss */
+        prop = of_find_property(node, "data-gpios", &i);
+        if (!prop) {
+                dev_err(dev, "data-gpios DT property missing");
+                return -ENODEV;
+        }
+
+	nb = of_gpio_named_count(node, "data-gpios");
+        /* Return error only for an incorrectly formed mcu-data property */
+        /*if (nb == 0 || nb == -ENOENT)
+                return 0;*/
+        if (nb < 0) {
+		dev_err(dev, "Failed to find data-gpios\n");
+                return nb;
+	}
+
+	val1 = of_get_named_gpio_flags(node, "data-gpios", 0, &flags);
+	if (val1 < 0) {
+		dev_err(dev, "Failed to find data-gpios flags\n");
+		return val1;
+	}
+	pr_debug("data-gpios value id 0x%02x!\n", val1);
+	pdata->data_pin = val1;
+
+	val2 = of_get_named_gpio_flags(node, "clk-gpios", 0, &flags);
+	if (val2 < 0) {
+		dev_err(dev, "Failed to find clk-gpios flags\n");
+		return val2;
+	}
+	pr_debug("clk-gpios value id 0x%02x!\n", val2);
+	pdata->clk_pin = val2;
+
+	val3 = of_get_named_gpio_flags(node, "act-gpios", 0, &flags);
+	if (val3 < 0) {
+		dev_err(dev, "Failed to find act-gpios flags\n");
+		return val3;
+	}
+	pr_debug("act-gpios value id 0x%02x!\n", val3);
+	pdata->act_pin = val3;
+
+        return 0;
+
+}
+
+static const struct of_device_id of_nsa3xx_hwmon_match[] = {
+	{
+		.name = "nas3xx-hwmon",
+		.compatible = "zyxel,nsa320-mcu",
+	},
+	{ },
+};
+#endif /* CONFIG_OF_GPIO */
+
+static const struct attribute_group nsa3xx_attr_group = {
+	.attrs	= nsa3xx_attributes,
+};
+
+static int nsa3xx_hwmon_request_gpios(struct nsa3xx_hwmon_platform_data *pdata)
+{
+	int ret;
+
+	if ((ret = gpio_request(pdata->act_pin, "act pin")))
+		return ret;
+
+	if ((ret = gpio_request(pdata->clk_pin, "clk pin")))
+		return ret;
+
+	if ((ret = gpio_request(pdata->data_pin, "data pin")))
+		return ret;
+
+	if ((ret = gpio_direction_output(pdata->act_pin, 1)))
+		return ret;
+
+	if ((ret = gpio_direction_output(pdata->clk_pin, 1)))
+		return ret;
+
+	if ((ret = gpio_direction_input(pdata->data_pin)))
+		return ret;
+
+	return 0;
+}
+
+static void nsa3xx_hwmon_free_gpios(struct nsa3xx_hwmon_platform_data *pdata)
+{
+	gpio_free(pdata->act_pin);
+	gpio_free(pdata->clk_pin);
+	gpio_free(pdata->data_pin);
+}
+
+static int nsa3xx_hwmon_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct nsa3xx_hwmon *hwmon;
+	struct nsa3xx_hwmon_platform_data *pdata = pdev->dev.platform_data;
+
+	hwmon = devm_kzalloc(&pdev->dev, sizeof(struct nsa3xx_hwmon),
+				GFP_KERNEL);
+	if (!hwmon)
+		return -ENOMEM;
+
+#ifdef CONFIG_OF_GPIO
+        if (!pdata) {
+                pdata = devm_kzalloc(&pdev->dev,
+                                        sizeof(struct nsa3xx_hwmon_platform_data),
+                                        GFP_KERNEL);
+                if (!pdata)
+                        return -ENOMEM;
+		pdev->dev.platform_data = pdata;
+                ret = nsa3xx_hwmon_get_of_pdata(&pdev->dev, pdata);
+                if (ret)
+                        return ret;
+        }
+#else /* CONFIG_OF_GPIO */
+        if (!pdata)
+                return -EINVAL;
+#endif /* CONFIG_OF_GPIO */
+
+	platform_set_drvdata(pdev, hwmon);
+	hwmon->pdev = pdev;
+	hwmon->mcu_data = 0;
+	mutex_init(&hwmon->update_lock);
+
+	ret = sysfs_create_group(&pdev->dev.kobj, &nsa3xx_attr_group);
+	if (ret)
+		goto err;
+
+	hwmon->classdev = hwmon_device_register(&pdev->dev);
+	if (IS_ERR(hwmon->classdev)) {
+		ret = PTR_ERR(hwmon->classdev);
+		goto err_sysfs;
+	}
+
+	ret = nsa3xx_hwmon_request_gpios(pdata);
+	if (ret)
+		goto err_free_gpio;
+
+	dev_info(&pdev->dev, "initialized\n");
+
+	return 0;
+
+err_free_gpio:
+	nsa3xx_hwmon_free_gpios(pdata);
+	hwmon_device_unregister(hwmon->classdev);
+err_sysfs:
+	sysfs_remove_group(&pdev->dev.kobj, &nsa3xx_attr_group);
+err:
+	platform_set_drvdata(pdev, NULL);
+	kfree(hwmon);
+	return ret;
+}
+
+static int nsa3xx_hwmon_remove(struct platform_device *pdev)
+{
+	struct nsa3xx_hwmon *hwmon = platform_get_drvdata(pdev);
+
+	nsa3xx_hwmon_free_gpios(pdev->dev.platform_data);
+	hwmon_device_unregister(hwmon->classdev);
+	sysfs_remove_group(&pdev->dev.kobj, &nsa3xx_attr_group);
+	platform_set_drvdata(pdev, NULL);
+	kfree(hwmon);
+
+	return 0;
+}
+
+static struct platform_driver nsa3xx_hwmon_driver = {
+	.probe = nsa3xx_hwmon_probe,
+	.remove = nsa3xx_hwmon_remove,
+	.driver = {
+		.name = DRVNAME,
+		.owner = THIS_MODULE,
+#ifdef CONFIG_OF_GPIO
+                .of_match_table = of_match_ptr(of_nsa3xx_hwmon_match),
+#endif
+	},
+};
+
+module_platform_driver(nsa3xx_hwmon_driver);
+
+MODULE_AUTHOR("Peter Schildmann <linux@schildmann.info>");
+MODULE_DESCRIPTION("NSA3XX Hardware Monitoring");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:nsa3xx-hwmon");
diff -Naur a/drivers/leds/Kconfig b/drivers/leds/Kconfig
--- a/drivers/leds/Kconfig	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/leds/Kconfig	2016-03-13 22:15:36.450554254 -0700
@@ -607,6 +607,106 @@
 	  This option enabled support for the LEDs on the ARM Versatile
 	  and RealView boards. Say Y to enabled these.
 
+config LEDS_TRIGGERS
+ 	bool "LED Trigger support"
+ 	depends on LEDS_CLASS
+ 	help
+ 	  This option enables trigger support for the leds class.
+ 	  These triggers allow kernel events to drive the LEDs and can
+ 	  be configured via sysfs. If unsure, say Y.
+ 
+ 
+ config LEDS_TRIGGER_TIMER
+ 	tristate "LED Timer Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by a programmable timer
+ 	  via sysfs. Some LED hardware can be programmed to start
+ 	  blinking the LED without any further software interaction.
+ 	  For more details read Documentation/leds/leds-class.txt.
+ 
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_ONESHOT
+ 	tristate "LED One-shot Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to blink in one-shot pulses with parameters
+ 	  controlled via sysfs.  It's useful to notify the user on
+ 	  sporadic events, when there are no clear begin and end trap points,
+ 	  or on dense events, where this blinks the LED at constant rate if
+ 	  rearmed continuously.
+ 
+ 	  It also shows how to use the led_blink_set_oneshot() function.
+ 
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_IDE_DISK
+ 	bool "LED IDE Disk Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by IDE disk activity.
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_HEARTBEAT
+ 	tristate "LED Heartbeat Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by a CPU load average.
+ 	  The flash frequency is a hyperbolic function of the 1-minute
+ 	  load average.
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_BACKLIGHT
+ 	tristate "LED backlight Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled as a backlight device: they
+ 	  turn off and on when the display is blanked and unblanked.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_CPU
+ 	bool "LED CPU Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by active CPUs. This shows
+ 	  the active CPUs across an array of LEDs so you can see which
+ 	  CPUs are active on the system at any given moment.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_GPIO
+ 	tristate "LED GPIO Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	depends on GPIOLIB
+ 	help
+ 	  This allows LEDs to be controlled by gpio events. It's good
+ 	  when using gpios as switches and triggering the needed LEDs
+ 	  from there. One use case is n810's keypad LEDs that could
+ 	  be triggered by this trigger when user slides up to show
+ 	  keypad.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_DEFAULT_ON
+ 	tristate "LED Default ON Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be initialised in the ON state.
+ 	  If unsure, say Y.
+ 
+ comment "iptables trigger is under Netfilter config (LED target)"
+ 	depends on LEDS_TRIGGERS
+ 
+ config LEDS_TRIGGER_TRANSIENT
+ 	tristate "LED Transient Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows one time activation of a transient state on
+ 	  GPIO/PWM based hardware.
+ 	  If unsure, say Y
+
 comment "LED Triggers"
 source "drivers/leds/trigger/Kconfig"
 
diff -Naur a/drivers/leds/trigger/ledtrig-ide-disk.c b/drivers/leds/trigger/ledtrig-ide-disk.c
--- a/drivers/leds/trigger/ledtrig-ide-disk.c	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/leds/trigger/ledtrig-ide-disk.c	2016-03-13 22:51:27.668120372 -0700
@@ -1,8 +1,10 @@
 /*
  * LED IDE-Disk Activity Trigger
  *
- * Copyright 2006 Openedhand Ltd.
+/* Copyright 2016 bodhi <mibodhi@gmail.com>
  *
+ * based on
+ * Copyright 2006 Openedhand Ltd.
  * Author: Richard Purdie <rpurdie@openedhand.com>
  *
  * This program is free software; you can redistribute it and/or modify
@@ -17,19 +19,29 @@
 
 #define BLINK_DELAY 30
 
-DEFINE_LED_TRIGGER(ledtrig_ide);
+DEFINE_LED_TRIGGER(ledtrig_ide1);
+DEFINE_LED_TRIGGER(ledtrig_ide2);
 static unsigned long ide_blink_delay = BLINK_DELAY;
 
-void ledtrig_ide_activity(void)
+void ledtrig_ide_activity(int portno)
 {
-	led_trigger_blink_oneshot(ledtrig_ide,
-				  &ide_blink_delay, &ide_blink_delay, 0);
+	switch (portno) {
+		case 0:
+		        led_trigger_blink_oneshot(ledtrig_ide1, &ide_blink_delay, &ide_blink_delay, 0);
+			break;
+        	case 1:
+			led_trigger_blink_oneshot(ledtrig_ide2, &ide_blink_delay, &ide_blink_delay, 0);
+			break;
+		default:
+			break;
+	}
 }
 EXPORT_SYMBOL(ledtrig_ide_activity);
 
 static int __init ledtrig_ide_init(void)
 {
-	led_trigger_register_simple("ide-disk", &ledtrig_ide);
-	return 0;
+	led_trigger_register_simple("ide-disk1", &ledtrig_ide1);
+	led_trigger_register_simple("ide-disk2", &ledtrig_ide2);
+ 	return 0;
 }
 device_initcall(ledtrig_ide_init);
diff -Naur a/drivers/media/rc/Kconfig b/drivers/media/rc/Kconfig
--- a/drivers/media/rc/Kconfig	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/media/rc/Kconfig	2016-03-13 22:15:36.470554231 -0700
@@ -23,6 +23,17 @@
 	   LIRC daemon handles protocol decoding for IR reception and
 	   encoding for IR transmitting (aka "blasting").
 
+config LIRC_RPI
+        tristate "LIRC RPI interface driver"
+        depends on RC_CORE
+
+        ---help---
+           Enable this option to build the (modified version for RPI) Linux Infrared Remote
+           Control (LIRC) core device interface driver. The LIRC
+           interface passes raw IR to and from userspace, where the
+           LIRC daemon handles protocol decoding for IR reception and
+           encoding for IR transmitting (aka "blasting").
+
 config IR_LIRC_CODEC
 	tristate "Enable IR to LIRC bridge"
 	depends on RC_CORE
diff -Naur a/drivers/media/rc/lirc_rpi.c b/drivers/media/rc/lirc_rpi.c
--- a/drivers/media/rc/lirc_rpi.c	1969-12-31 16:00:00.000000000 -0800
+++ b/drivers/media/rc/lirc_rpi.c	2016-03-13 22:15:36.480554220 -0700
@@ -0,0 +1,797 @@
+/*
+ * lirc_rpi.c
+ *
+ * lirc_rpi - Device driver that records pulse- and pause-lengths
+ *	      (space-lengths) (just like the lirc_serial driver does)
+ *	      between GPIO interrupt events on the Raspberry Pi.
+ *	      Lots of code has been taken from the lirc_serial module,
+ *	      so I would like say thanks to the authors.
+ *
+ * Copyright (C) 2012 Aron Robert Szabo <aron@reon.hu>,
+ *		      Michael Bishop <cleverca22@gmail.com>
+ *		      Bengt Martensson <barf@bengt-martensson.de>
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/interrupt.h>
+#include <linux/sched.h>
+#include <linux/kernel.h>
+#include <linux/time.h>
+#include <linux/string.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/irq.h>
+#include <linux/spinlock.h>
+#include <media/lirc.h>
+#include <media/lirc_dev.h>
+#include <linux/gpio.h>
+
+#define LIRC_DRIVER_NAME "lirc_rpi"
+/*#define RBUF_LEN 256*/
+#define RBUF_LEN 1024
+#define LIRC_TRANSMITTER_LATENCY 256
+
+#ifndef MAX_UDELAY_MS
+#define MAX_UDELAY_US 5000
+#else
+#define MAX_UDELAY_US (MAX_UDELAY_MS*1000)
+#endif
+
+#define LIRC_RPI_MAX_TRANSMITTERS 8
+#define INVALID -1
+
+#define dprintk(fmt, args...)					\
+	do {							\
+		if (debug)					\
+			printk(KERN_DEBUG LIRC_DRIVER_NAME ": "	\
+			       fmt, ## args);			\
+	} while (0)
+
+/* module parameters */
+
+/* set the default GPIO input pin */
+static int gpio_in_pin = INVALID;
+/* set the default GPIO output pins */
+/* Note: LIRC appears to number the transmitters starting with 1, not 0. */
+static int gpio_out_pins[LIRC_RPI_MAX_TRANSMITTERS] =
+	{INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID};
+/* actual number of configured transmitters */
+static int n_transmitters = 0;
+/* enable debugging messages */
+static int debug;
+/* INVALID = auto, 0 = active high, 1 = active low */
+static int sense = INVALID;
+/* use softcarrier by default */
+static int softcarrier = 1;
+/* 0 = do not invert output, 1 = invert output */
+static int invert = 0;
+/* Transmit mask */
+unsigned int tx_mask = 1; /* First transmitter (#1) selected */
+
+struct gpio_chip *gpiochip;
+struct irq_chip *irqchip;
+struct irq_data *irqdata;
+
+/* forward declarations */
+static long send_pulse(unsigned long length);
+static void send_space(long length);
+static void lirc_rpi_exit(void);
+
+int valid_gpio_pins[] = { 0, 1, 4, 8, 7, 9, 10, 11, 14, 15, 17, 18, 21, 22, 23,
+	24, 25 };
+
+static struct platform_device *lirc_rpi_dev;
+static struct timeval lasttv = { 0, 0 };
+static struct lirc_buffer rbuf;
+static spinlock_t lock;
+
+/* initialized/set in init_timing_params() */
+static unsigned int freq = 38000;
+static unsigned int duty_cycle = 50;
+static unsigned long period;
+static unsigned long pulse_width;
+static unsigned long space_width;
+
+static int inline transmitter_enabled(int n) {
+	return tx_mask & (1 << n);
+}
+
+static void inline gpio_setpin(int pin, int value) {
+	gpiochip->set(gpiochip, pin, value ^ invert);
+}
+
+static void safe_udelay(unsigned long usecs)
+{
+	while (usecs > MAX_UDELAY_US) {
+		udelay(MAX_UDELAY_US);
+		usecs -= MAX_UDELAY_US;
+	}
+	udelay(usecs);
+}
+
+static int init_timing_params(unsigned int new_duty_cycle,
+	unsigned int new_freq)
+{
+	/*
+	 * period, pulse/space width are kept with 8 binary places -
+	 * IE multiplied by 256.
+	 */
+ 	if (new_freq > 0) {
+		if (256 * 1000000L / new_freq * new_duty_cycle / 100 <=
+		    LIRC_TRANSMITTER_LATENCY)
+			return -EINVAL;
+		if (256 * 1000000L / new_freq * (100 - new_duty_cycle) / 100 <=
+		    LIRC_TRANSMITTER_LATENCY)
+			return -EINVAL;
+		duty_cycle = new_duty_cycle;
+		freq = new_freq;
+		period = 256 * 1000000L / freq;
+		pulse_width = period * duty_cycle / 100;
+		space_width = period - pulse_width;
+	} else {
+		duty_cycle = INVALID;
+		freq = 0;
+		period = INVALID;
+		pulse_width = INVALID;
+		space_width = INVALID;
+	}
+	dprintk("in init_timing_params, freq=%d pulse=%ld, "
+		"space=%ld\n", freq, pulse_width, space_width);
+	return 0;
+}
+
+static long send_pulse_softcarrier(unsigned long length)
+{
+	int flag, i;
+	unsigned long actual, target, d;
+
+	length <<= 8;
+
+	actual = 0; target = 0; flag = 0;
+	while (actual < length) {
+		for (i = 0; i < n_transmitters; i++)
+			if (transmitter_enabled(i))
+				gpio_setpin(gpio_out_pins[i], !flag);
+		target += flag ? space_width : pulse_width;
+		
+		d = (target - actual -
+		     LIRC_TRANSMITTER_LATENCY + 128) >> 8;
+		/*
+		 * Note - we've checked in ioctl that the pulse/space
+		 * widths are big enough so that d is > 0
+		 */
+		udelay(d);
+		actual += (d << 8) + LIRC_TRANSMITTER_LATENCY;
+		flag = !flag;
+	}
+	return (actual-length) >> 8;
+}
+
+static long send_pulse(unsigned long length)
+{
+	int i;
+	if (length <= 0)
+		return 0;
+
+	if (softcarrier && freq > 0) {
+		return send_pulse_softcarrier(length);
+	} else {
+		for (i = 0; i < n_transmitters; i++)
+			if (transmitter_enabled(i))
+				gpio_setpin(gpio_out_pins[i], 1);
+		
+		safe_udelay(length);
+		return 0;
+	}
+}
+
+static void send_space(long length)
+{
+	int i;
+	for (i = 0; i < n_transmitters; i++)
+		gpio_setpin(gpio_out_pins[i], 0);
+	if (length <= 0)
+		return;
+	safe_udelay(length);
+}
+
+static void rbwrite(int l)
+{
+	if (lirc_buffer_full(&rbuf)) {
+		/* no new signals will be accepted */
+		dprintk("Buffer overrun\n");
+		return;
+	}
+	lirc_buffer_write(&rbuf, (void *)&l);
+}
+
+static void frbwrite(int l)
+{
+	/* simple noise filter */
+	static int pulse, space;
+	static unsigned int ptr;
+
+	if (ptr > 0 && (l & PULSE_BIT)) {
+		pulse += l & PULSE_MASK;
+		if (pulse > 250) {
+			rbwrite(space);
+			rbwrite(pulse | PULSE_BIT);
+			ptr = 0;
+			pulse = 0;
+		}
+		return;
+	}
+	if (!(l & PULSE_BIT)) {
+		if (ptr == 0) {
+			if (l > 20000) {
+				space = l;
+				ptr++;
+				return;
+			}
+		} else {
+			if (l > 20000) {
+				space += pulse;
+				if (space > PULSE_MASK)
+					space = PULSE_MASK;
+				space += l;
+				if (space > PULSE_MASK)
+					space = PULSE_MASK;
+				pulse = 0;
+				return;
+			}
+			rbwrite(space);
+			rbwrite(pulse | PULSE_BIT);
+			ptr = 0;
+			pulse = 0;
+		}
+	}
+	rbwrite(l);
+}
+
+static irqreturn_t irq_handler(int i, void *blah, struct pt_regs *regs)
+{
+	struct timeval tv;
+	long deltv;
+	int data;
+	int signal;
+
+	/* use the GPIO signal level */
+	signal = gpiochip->get(gpiochip, gpio_in_pin);
+
+	/* unmask the irq */
+	irqchip->irq_unmask(irqdata);
+
+	if (sense != INVALID) {
+		/* get current time */
+		do_gettimeofday(&tv);
+
+		/* calc time since last interrupt in microseconds */
+		deltv = tv.tv_sec-lasttv.tv_sec;
+		if (tv.tv_sec < lasttv.tv_sec ||
+		    (tv.tv_sec == lasttv.tv_sec &&
+		     tv.tv_usec < lasttv.tv_usec)) {
+			printk(KERN_WARNING LIRC_DRIVER_NAME
+			       ": AIEEEE: your clock just jumped backwards\n");
+			printk(KERN_WARNING LIRC_DRIVER_NAME
+			       ": %d %d %lx %lx %lx %lx\n", signal, sense,
+			       tv.tv_sec, lasttv.tv_sec,
+			       tv.tv_usec, lasttv.tv_usec);
+			data = PULSE_MASK;
+		} else if (deltv > 15) {
+			data = PULSE_MASK; /* really long time */
+			if (!(signal^sense)) {
+				/* sanity check */
+				printk(KERN_WARNING LIRC_DRIVER_NAME
+				       ": AIEEEE: %d %d %lx %lx %lx %lx\n",
+				       signal, sense, tv.tv_sec, lasttv.tv_sec,
+				       tv.tv_usec, lasttv.tv_usec);
+				/*
+				 * detecting pulse while this
+				 * MUST be a space!
+				 */
+				sense = sense ? 0 : 1;
+			}
+		} else {
+			data = (int) (deltv*1000000 +
+				      (tv.tv_usec - lasttv.tv_usec));
+		}
+		frbwrite(signal^sense ? data : (data|PULSE_BIT));
+		lasttv = tv;
+		wake_up_interruptible(&rbuf.wait_poll);
+	}
+
+	return IRQ_HANDLED;
+}
+
+static int is_right_chip(struct gpio_chip *chip, void *data)
+{
+	dprintk("is_right_chip %s %d\n", chip->label, strcmp(data, chip->label));
+
+	if (strcmp(data, chip->label) == 0)
+		return 1;
+	return 0;
+}
+
+static int init_port(void)
+{
+	int i, nlow, nhigh, ret, irq;
+
+	gpiochip = gpiochip_find("bcm2708_gpio", is_right_chip);
+
+	if (!gpiochip)
+		return -ENODEV;
+
+	for (i = 0; i < n_transmitters; i++) {
+		if (gpio_request(gpio_out_pins[i], LIRC_DRIVER_NAME " ir/out")) {
+			printk(KERN_ALERT LIRC_DRIVER_NAME
+			       ": cant claim gpio pin %d\n", gpio_out_pins[i]);
+			ret = -ENODEV;
+			goto exit_init_port;
+		}
+	}
+
+	if (gpio_in_pin != INVALID && gpio_request(gpio_in_pin, LIRC_DRIVER_NAME " ir/in")) {
+		printk(KERN_ALERT LIRC_DRIVER_NAME
+		       ": cant claim gpio pin %d\n", gpio_in_pin);
+		ret = -ENODEV;
+		goto exit_gpio_free_out_pin;
+	}
+
+	gpiochip->direction_input(gpiochip, gpio_in_pin);
+	for (i = 0; i < n_transmitters; i++) {
+		gpiochip->direction_output(gpiochip, gpio_out_pins[i], 1);
+		gpio_setpin(gpio_out_pins[i], 0);
+		dprintk("Pin %d set up as transmitter #%d\n",
+			gpio_out_pins[i], i+1);
+	}
+
+	irq = gpiochip->to_irq(gpiochip, gpio_in_pin);
+	dprintk("to_irq %d\n", irq);
+	irqdata = irq_get_irq_data(irq);
+
+	if (irqdata && irqdata->chip) {
+		irqchip = irqdata->chip;
+	} else {
+		ret = -ENODEV;
+		goto exit_gpio_free_in_pin;
+	}
+
+	/* if pin is high, then this must be an active low receiver. */
+	if (gpio_in_pin == INVALID) /* Nothing to check */
+		return 0;
+	if (sense == INVALID) {
+		/* wait 1/2 sec for the power supply */
+		msleep(500);
+
+		/*
+		 * probe 9 times every 0.04s, collect "votes" for
+		 * active high/low
+		 */
+		nlow = 0;
+		nhigh = 0;
+		for (i = 0; i < 9; i++) {
+			if (gpiochip->get(gpiochip, gpio_in_pin))
+				nlow++;
+			else
+				nhigh++;
+			msleep(40);
+		}
+		sense = (nlow >= nhigh ? 1 : 0);
+		printk(KERN_INFO LIRC_DRIVER_NAME
+		       ": auto-detected active %s receiver on GPIO pin %d\n",
+		       sense ? "low" : "high", gpio_in_pin);
+	} else {
+		printk(KERN_INFO LIRC_DRIVER_NAME
+		       ": manually using active %s receiver on GPIO pin %d\n",
+		       sense ? "low" : "high", gpio_in_pin);
+	}
+
+	return 0;
+
+	exit_gpio_free_in_pin:
+	gpio_free(gpio_in_pin);
+
+	exit_gpio_free_out_pin:
+	for (i = 0; i < n_transmitters; i++) {
+		gpio_free(gpio_out_pins[i]);
+	}
+
+	exit_init_port:
+	return ret;
+}
+
+/* called when the character device is opened */
+static int set_use_inc(void *data)
+{
+	int result;
+	unsigned long flags;
+
+	/* initialize timestamp */
+	do_gettimeofday(&lasttv);
+
+	result = request_irq(gpiochip->to_irq(gpiochip, gpio_in_pin),
+			     (irq_handler_t) irq_handler, 0,
+			     LIRC_DRIVER_NAME, (void*) 0);
+
+	switch (result) {
+	case -EBUSY:
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": IRQ %d is busy\n",
+		       gpiochip->to_irq(gpiochip, gpio_in_pin));
+		return -EBUSY;
+	case -EINVAL:
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": Bad irq number or handler\n");
+		return -EINVAL;
+	default:
+		dprintk("Interrupt %d obtained\n",
+			gpiochip->to_irq(gpiochip, gpio_in_pin));
+		break;
+	};
+
+	/* initialize pulse/space widths */
+	init_timing_params(duty_cycle, freq);
+
+	spin_lock_irqsave(&lock, flags);
+
+	/* GPIO Pin Falling/Rising Edge Detect Enable */
+	irqchip->irq_set_type(irqdata,
+			      IRQ_TYPE_EDGE_RISING | IRQ_TYPE_EDGE_FALLING);
+
+	/* unmask the irq */
+	irqchip->irq_unmask(irqdata);
+
+	spin_unlock_irqrestore(&lock, flags);
+
+	return 0;
+}
+
+static void set_use_dec(void *data)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&lock, flags);
+
+	/* GPIO Pin Falling/Rising Edge Detect Disable */
+	irqchip->irq_set_type(irqdata, 0);
+	irqchip->irq_mask(irqdata);
+
+	spin_unlock_irqrestore(&lock, flags);
+
+	free_irq(gpiochip->to_irq(gpiochip, gpio_in_pin), (void *) 0);
+
+	dprintk(KERN_INFO LIRC_DRIVER_NAME
+		": freed IRQ %d\n", gpiochip->to_irq(gpiochip, gpio_in_pin));
+}
+
+static ssize_t lirc_write(struct file *file, const char *buf,
+	size_t n, loff_t *ppos)
+{
+	int i, count;
+	unsigned long flags;
+	long delta = 0;
+	int *wbuf;
+
+	count = n / sizeof(int);
+	if (n % sizeof(int) || count % 2 == 0)
+		return -EINVAL;
+	wbuf = memdup_user(buf, n);
+	if (IS_ERR(wbuf))
+		return PTR_ERR(wbuf);
+	spin_lock_irqsave(&lock, flags);
+
+	for (i = 0; i < count; i++) {
+		if (i%2)
+			send_space(wbuf[i] - delta);
+		else
+			delta = send_pulse(wbuf[i]);
+	}
+	for (i = 0; i < n_transmitters; i++)
+		gpio_setpin(gpio_out_pins[i], 0);
+
+	spin_unlock_irqrestore(&lock, flags);
+	kfree(wbuf);
+	return n;
+}
+
+static long lirc_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
+{
+	int result;
+	__u32 value;
+
+	switch (cmd) {
+	case LIRC_GET_SEND_MODE:
+		return -ENOIOCTLCMD;
+		break;
+
+	case LIRC_SET_SEND_MODE:
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		/* only LIRC_MODE_PULSE supported */
+		if (value != LIRC_MODE_PULSE)
+			return -ENOSYS;
+		break;
+
+	case LIRC_GET_LENGTH:
+		return -ENOSYS;
+		break;
+
+	case LIRC_SET_SEND_DUTY_CYCLE:
+		dprintk("SET_SEND_DUTY_CYCLE\n");
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		if (value <= 0 || value > 100)
+			return -EINVAL;
+		return init_timing_params(value, freq);
+		break;
+
+	case LIRC_SET_SEND_CARRIER:
+		dprintk("SET_SEND_CARRIER\n");
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		/* if (value > 500000 || value < 20000) */
+		if (value > 500000 || value < 0)
+			return -EINVAL;
+		return init_timing_params(duty_cycle, value);
+		break;
+
+	case LIRC_SET_TRANSMITTER_MASK:
+		dprintk("SET_TRANSMITTER_MASK\n");
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		if ((value & ((1 << n_transmitters) - 1)) != value)
+			return n_transmitters;
+		tx_mask = value;
+		break;
+
+	default:
+		return lirc_dev_fop_ioctl(filep, cmd, arg);
+	}
+	return 0;
+}
+
+static const struct file_operations lirc_fops = {
+	.owner		= THIS_MODULE,
+	.write		= lirc_write,
+	.unlocked_ioctl	= lirc_ioctl,
+	.read		= lirc_dev_fop_read,
+	.poll		= lirc_dev_fop_poll,
+	.open		= lirc_dev_fop_open,
+	.release	= lirc_dev_fop_close,
+	.llseek		= no_llseek,
+};
+
+static struct lirc_driver driver = {
+	.name		= LIRC_DRIVER_NAME,
+	.minor		= INVALID,
+	.code_length	= 1,
+	.sample_rate	= 0,
+	.data		= NULL,
+	.add_to_buf	= NULL,
+	.rbuf		= &rbuf,
+	.set_use_inc	= set_use_inc,
+	.set_use_dec	= set_use_dec,
+	.fops		= &lirc_fops,
+	.dev		= NULL,
+	.owner		= THIS_MODULE,
+};
+
+static struct platform_driver lirc_rpi_driver = {
+	.driver = {
+		.name   = LIRC_DRIVER_NAME,
+		.owner  = THIS_MODULE,
+	},
+};
+
+static int __init lirc_rpi_init(void)
+{
+	int result;
+
+	/* Init read buffer. */
+	result = lirc_buffer_init(&rbuf, sizeof(int), RBUF_LEN);
+	if (result < 0)
+		return -ENOMEM;
+
+	result = platform_driver_register(&lirc_rpi_driver);
+	if (result) {
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": lirc register returned %d\n", result);
+		goto exit_buffer_free;
+	}
+
+	lirc_rpi_dev = platform_device_alloc(LIRC_DRIVER_NAME, 0);
+	if (!lirc_rpi_dev) {
+		result = -ENOMEM;
+		goto exit_driver_unregister;
+	}
+
+	result = platform_device_add(lirc_rpi_dev);
+	if (result)
+		goto exit_device_put;
+
+	return 0;
+
+	exit_device_put:
+	platform_device_put(lirc_rpi_dev);
+
+	exit_driver_unregister:
+	platform_driver_unregister(&lirc_rpi_driver);
+
+	exit_buffer_free:
+	lirc_buffer_free(&rbuf);
+
+	return result;
+}
+
+static void lirc_rpi_exit(void)
+{
+	int i;
+	for (i = 0; i < n_transmitters; i++)
+		gpio_free(gpio_out_pins[i]);
+	if (gpio_in_pin != INVALID)
+		gpio_free(gpio_in_pin);
+	platform_device_unregister(lirc_rpi_dev);
+	platform_driver_unregister(&lirc_rpi_driver);
+	lirc_buffer_free(&rbuf);
+}
+
+static int __init lirc_rpi_init_module(void)
+{
+	int result, i, j;
+	int in_pin_ok = 0;
+
+	result = lirc_rpi_init();
+	if (result)
+		return result;
+
+	/* check if the module received valid gpio pin numbers */
+	/* loader checks that n_transmitters <= LIRC_RPI_MAX_TRANSMITTERS) */
+	result = 0;
+	for (i = 0; i < ARRAY_SIZE(valid_gpio_pins); i++) {
+		if  (gpio_in_pin == valid_gpio_pins[i])
+			in_pin_ok = 1;
+		for (j = 0; j < n_transmitters; j++) {
+			if (gpio_out_pins[j] == gpio_in_pin) {
+				result = -EINVAL;
+				printk(KERN_ERR LIRC_DRIVER_NAME
+				       ": GPIO in-pin %d is also output!\n",
+				       gpio_in_pin);
+				goto exit_rpi;
+			}
+			if (gpio_out_pins[j] == valid_gpio_pins[i]) {
+				result++;
+				break; /* Count every pin only once */
+			}
+		}
+	}
+	if (n_transmitters == 0) {
+		if (gpio_in_pin == INVALID) {
+			result = -EINVAL;
+			printk(KERN_ERR LIRC_DRIVER_NAME
+			       ": no GPIO in- or outpins specified.\n");
+			goto exit_rpi;
+		} else {
+			printk(KERN_WARNING LIRC_DRIVER_NAME
+			       ": no GPIO outpins specified, probably desired.\n");
+		}
+	} else if (result != n_transmitters) {
+		result = -EINVAL;
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": invalid GPIO output pin(s) specified!\n");
+		goto exit_rpi;
+	}
+	if (gpio_in_pin == INVALID)
+		printk(KERN_WARNING LIRC_DRIVER_NAME
+		       ": no GPIO inpin specified, probably desired.\n");
+	else if (in_pin_ok != 1) {
+		result = -EINVAL;
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": invalid GPIO inpin specified!\n");
+		goto exit_rpi;
+	}
+
+	if (n_transmitters > 0 &&
+	    (tx_mask & ((1 << n_transmitters) - 1)) != tx_mask) {
+		result = -EINVAL;
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": tx_mask incompatible with %d transmitters "
+		       "specified!\n", n_transmitters);
+		goto exit_rpi;
+	}
+
+	driver.features = 0;
+	if (n_transmitters > 0)
+		driver.features |= LIRC_CAN_SEND_PULSE;
+	if (softcarrier)
+		driver.features |= LIRC_CAN_SET_SEND_DUTY_CYCLE | 
+		  LIRC_CAN_SET_SEND_CARRIER;
+	if (gpio_in_pin != INVALID)
+		driver.features |= LIRC_CAN_REC_MODE2;
+	if (n_transmitters > 1)
+		driver.features |= LIRC_CAN_SET_TRANSMITTER_MASK;
+
+	driver.dev = &lirc_rpi_dev->dev;
+	driver.minor = lirc_register_driver(&driver);
+
+	if (driver.minor < 0) {
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": device registration failed with %d\n", result);
+		result = -EIO;
+		goto exit_rpi;
+	}
+
+	printk(KERN_INFO LIRC_DRIVER_NAME ": driver registered!\n");
+
+	result = init_port();
+	if (result < 0)
+		goto exit_rpi;
+
+	return 0;
+
+	exit_rpi:
+	lirc_rpi_exit();
+
+	return result;
+}
+
+static void __exit lirc_rpi_exit_module(void)
+{
+	lirc_rpi_exit();
+
+	lirc_unregister_driver(driver.minor);
+	printk(KERN_INFO LIRC_DRIVER_NAME ": cleaned up module\n");
+}
+
+module_init(lirc_rpi_init_module);
+module_exit(lirc_rpi_exit_module);
+
+MODULE_DESCRIPTION("Infra-red receiver and blaster driver for Raspberry Pi GPIO.");
+MODULE_AUTHOR("Aron Robert Szabo <aron@reon.hu>");
+MODULE_AUTHOR("Michael Bishop <cleverca22@gmail.com>");
+MODULE_AUTHOR("Bengt Martensson <barf@bengt-martensson.de>");
+MODULE_LICENSE("GPL");
+
+module_param_array(gpio_out_pins, int, &n_transmitters, S_IRUGO);
+MODULE_PARM_DESC(gpio_out_pins, "GPIO output/transmitter pins of the BCM"
+		 " processor as array. The first is called transmitter #1 "
+		 "(not 0). Valid pin numbers are: 0, 1, 4, 8, 7, 9, 10, 11,"
+		 " 14, 15, 17, 18, 21, 22, 23, 24, 25. Default is none");
+
+module_param(gpio_in_pin, int, S_IRUGO);
+MODULE_PARM_DESC(gpio_in_pin, "GPIO input pin number of the BCM processor."
+		 " Valid pin numbers are: 0, 1, 4, 8, 7, 9, 10, 11, 14, 15,"
+		 " 17, 18, 21, 22, 23, 24, 25. Default is none");
+
+module_param(sense, bool, S_IRUGO);
+MODULE_PARM_DESC(sense, "Override autodetection of IR receiver circuit"
+		 " (0 = active high, 1 = active low )");
+
+module_param(softcarrier, bool, S_IRUGO);
+MODULE_PARM_DESC(softcarrier, "Software carrier (0 = off, 1 = on, default on)");
+
+module_param(invert, bool, S_IRUGO);
+MODULE_PARM_DESC(invert, "Invert output (0 = off, 1 = on, default off)");
+
+module_param(tx_mask, int, S_IRUGO);
+MODULE_PARM_DESC(tx_mask, "Transmitter mask (default: 0x01)");
+
+module_param(debug, bool, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(debug, "Enable debugging messages");
diff -Naur a/drivers/media/rc/Makefile b/drivers/media/rc/Makefile
--- a/drivers/media/rc/Makefile	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/media/rc/Makefile	2016-03-13 22:15:36.480554220 -0700
@@ -4,6 +4,7 @@
 
 obj-$(CONFIG_RC_CORE) += rc-core.o
 obj-$(CONFIG_LIRC) += lirc_dev.o
+obj-$(CONFIG_LIRC_RPI) += lirc_rpi.o
 obj-$(CONFIG_IR_NEC_DECODER) += ir-nec-decoder.o
 obj-$(CONFIG_IR_RC5_DECODER) += ir-rc5-decoder.o
 obj-$(CONFIG_IR_RC6_DECODER) += ir-rc6-decoder.o
diff -Naur a/drivers/mmc/core/sd.c b/drivers/mmc/core/sd.c
--- a/drivers/mmc/core/sd.c	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/mmc/core/sd.c	2016-03-13 22:15:36.500554197 -0700
@@ -365,6 +365,15 @@
 		return -ENOMEM;
 	}
 
+	/*
+	 * Some SDHC cards, notably those with a Sandisk SD controller
+	 * (also found in Kingston products) need a bit of slack
+	 * before successfully handling the SWITCH command.  So far,
+	 * cards identifying themselves as "SD04G" and "SD08G" are
+	 * affected
+	 */
+	udelay(100);
+
 	err = mmc_sd_switch(card, 1, 0, 1, status);
 	if (err)
 		goto out;
diff -Naur a/drivers/net/ethernet/marvell/mv643xx_eth.c b/drivers/net/ethernet/marvell/mv643xx_eth.c
--- a/drivers/net/ethernet/marvell/mv643xx_eth.c	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/net/ethernet/marvell/mv643xx_eth.c	2016-03-17 18:32:48.256994199 -0700
@@ -1,5 +1,11 @@
 /*
  * Driver for Marvell Discovery (MV643XX) and Marvell Orion ethernet ports
+ *
+ * Copyright (C) 2015 bodhi <mibodhi@gmail.com>
+ * Copyright (C) 2015 michal osowiecki <michal.osowiecki@gmail.com>
+ *
+ * Based on
+ * Copyright (C) 2002 Matthew Dharm <mdharm@momenco.com>
  * Copyright (C) 2002 Matthew Dharm <mdharm@momenco.com>
  *
  * Based on the 64360 driver from:
@@ -2339,8 +2345,22 @@
 		phy_init_hw(mp->phy);
 		mv643xx_eth_set_settings(mp->dev, &cmd);
 		phy_start(mp->phy);
-	}
 
+		/* For these devive, the MCU set the phy to 10-Mb mode as low-power status.
+		 * We have to set it back when booting up.
+		 * Set the phy back to auto-negotiation mode 
+		*/
+                if ( of_machine_is_compatible("zyxel,nsa310s") ||
+			of_machine_is_compatible("zyxel,nsa320s") ||
+			of_machine_is_compatible("zyxel,nsa320") ||
+			of_machine_is_compatible("zyxel,nsa325") ) {
+
+			printk ("mv643xx_eth: Set the PHY back to auto-negotiation mode");
+			phy_write(mp->phy, 0x4, 0x1e1);
+			phy_write(mp->phy, 0x9, 0x300);
+			phy_write(mp->phy, 0x0, 0x9140);
+		}
+	}
 	/*
 	 * Configure basic link parameters.
 	 */
@@ -3132,8 +3152,20 @@
 					 PHY_INTERFACE_MODE_GMII);
 		if (!mp->phy)
 			err = -ENODEV;
-		else
+		else {
+	                /* For these devices, set the PHY to fix link down after coming up from power off */
+	                if ( of_machine_is_compatible("zyxel,nsa310s") ||
+        	                of_machine_is_compatible("zyxel,nsa320s") ||
+                	        of_machine_is_compatible("zyxel,nsa320") ||
+                        	of_machine_is_compatible("zyxel,nsa325") ) {
+
+	                        printk ("mv643xx_eth: Set the PHY to fix link down");
+        	                phy_write(mp->phy, 22, 0x3);
+                	        phy_write(mp->phy, 22, 0x0);
+	                }
 			phy_addr_set(mp, mp->phy->mdio.addr);
+		}
+
 	} else if (pd->phy_addr != MV643XX_ETH_PHY_NONE) {
 		mp->phy = phy_scan(mp, pd->phy_addr);
 
@@ -3178,7 +3210,7 @@
 	dev->watchdog_timeo = 2 * HZ;
 	dev->base_addr = 0;
 
-	dev->features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_TSO;
+	dev->features = NETIF_F_SG | NETIF_F_IP_CSUM;
 	dev->vlan_features = dev->features;
 
 	dev->features |= NETIF_F_RXCSUM;
diff -Naur a/drivers/net/Kconfig b/drivers/net/Kconfig
--- a/drivers/net/Kconfig	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/net/Kconfig	2016-03-13 22:15:36.560554128 -0700
@@ -26,6 +26,7 @@
 if NETDEVICES
 
 config MII
+	default y
 	tristate
 
 config NET_CORE
diff -Naur a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
--- a/drivers/net/phy/Kconfig	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/net/phy/Kconfig	2016-03-13 22:15:36.570554117 -0700
@@ -33,7 +33,7 @@
 	tristate "Drivers for Marvell PHYs"
 	---help---
 	  Currently has a driver for the 88E1011S
-	
+
 config DAVICOM_PHY
 	tristate "Drivers for Davicom PHYs"
 	---help---
@@ -262,3 +262,5 @@
 config MICREL_KS8995MA
 	tristate "Micrel KS8995MA 5-ports 10/100 managed Ethernet switch"
 	depends on SPI
+
+
diff -Naur a/drivers/pinctrl/mvebu/pinctrl-kirkwood.c b/drivers/pinctrl/mvebu/pinctrl-kirkwood.c
--- a/drivers/pinctrl/mvebu/pinctrl-kirkwood.c	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/pinctrl/mvebu/pinctrl-kirkwood.c	2016-03-13 22:15:36.580554105 -0700
@@ -120,7 +120,7 @@
 		MPP_VAR_FUNCTION(0x5, "sata0", "act",    V(0, 1, 1, 1, 1, 0))),
 	MPP_MODE(12,
 		MPP_VAR_FUNCTION(0x0, "gpo", NULL,       V(1, 1, 1, 0, 1, 0)),
-		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(0, 0, 0, 1, 0, 0)),
+		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(1, 1, 1, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0x1, "sdio", "clk",     V(1, 1, 1, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0xa, "audio", "spdifo", V(0, 0, 0, 0, 1, 0)),
 		MPP_VAR_FUNCTION(0xb, "spi", "mosi",     V(0, 0, 0, 0, 1, 0)),
@@ -351,7 +351,7 @@
 		MPP_VAR_FUNCTION(0x2, "tdm", "fs",       V(0, 0, 0, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0xb, "lcd", "hsync",    V(0, 0, 0, 0, 1, 0))),
 	MPP_MODE(47,
-		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(0, 0, 0, 1, 1, 0)),
+		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(1, 1, 1, 1, 1, 1)),
 		MPP_VAR_FUNCTION(0x1, "ts", "mp11",      V(0, 0, 0, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0x2, "tdm", "drx",      V(0, 0, 0, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0xb, "lcd", "vsync",    V(0, 0, 0, 0, 1, 0))),
@@ -361,7 +361,7 @@
 		MPP_VAR_FUNCTION(0x2, "tdm", "dtx",      V(0, 0, 0, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0xb, "lcd", "d16",      V(0, 0, 0, 0, 1, 0))),
 	MPP_MODE(49,
-		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(0, 0, 0, 1, 0, 1)),
+		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(1, 1, 1, 1, 1, 1)),
 		MPP_VAR_FUNCTION(0x0, "gpo", NULL,       V(0, 0, 0, 0, 1, 0)),
 		MPP_VAR_FUNCTION(0x1, "ts", "mp9",       V(0, 0, 0, 1, 0, 0)),
 		MPP_VAR_FUNCTION(0x2, "tdm", "rx0ql",    V(0, 0, 0, 1, 1, 0)),
diff -Naur a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
--- a/drivers/rtc/Kconfig	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/rtc/Kconfig	2016-03-13 22:15:36.590554094 -0700
@@ -249,6 +249,15 @@
 	  This driver can also be built as a module.  If so, the module
 	  will be called rtc-ds3232.
 
+config RTC_DRV_HT1382
+	tristate "Holtek HT1382"
+	depends on I2C && OF
+	help
+	  Say Y to enable support for the HT1382 I2C RTC chip.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called rtc-ht1382.
+
 config RTC_DRV_HYM8563
 	tristate "Haoyu Microelectronics HYM8563"
 	depends on OF
diff -Naur a/drivers/rtc/Makefile b/drivers/rtc/Makefile
--- a/drivers/rtc/Makefile	2016-03-13 21:28:54.000000000 -0700
+++ b/drivers/rtc/Makefile	2016-03-13 22:15:36.590554094 -0700
@@ -67,6 +67,7 @@
 obj-$(CONFIG_RTC_DRV_GEMINI)	+= rtc-gemini.o
 obj-$(CONFIG_RTC_DRV_GENERIC)	+= rtc-generic.o
 obj-$(CONFIG_RTC_DRV_HID_SENSOR_TIME) += rtc-hid-sensor-time.o
+obj-$(CONFIG_RTC_DRV_HT1382)	+= rtc-ht1382.o
 obj-$(CONFIG_RTC_DRV_HYM8563)	+= rtc-hym8563.o
 obj-$(CONFIG_RTC_DRV_IMXDI)	+= rtc-imxdi.o
 obj-$(CONFIG_RTC_DRV_ISL12022)	+= rtc-isl12022.o
diff -Naur a/drivers/rtc/rtc-ht1382.c b/drivers/rtc/rtc-ht1382.c
--- a/drivers/rtc/rtc-ht1382.c	1969-12-31 16:00:00.000000000 -0800
+++ b/drivers/rtc/rtc-ht1382.c	2016-03-13 22:15:36.590554094 -0700
@@ -0,0 +1,213 @@
+/*
+ * Driver for Holtek HT1382 RTC.
+ *
+ * Copyright (C) 2015 bodhi <mibodhi@gmail.com>
+ * Copyright (C) 2015 michal osowiecki <michal.osowiecki@gmail.com>
+ *
+ * Based on
+ * Copyright (C) 2015 Karoly Pocsi <chrlee@chrlee.net>
+ *
+ * Based on bq32k driver by Semihalf and Pavel Machek
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * You can get hardware description at
+ * http://www.holtek.com.tw/english/docum/consumer/1382.htm
+ *
+ * NOTE: Currently this driver only supports the bare minimum for read
+ * and write the RTC. The extra features provided by the chip
+ * (alarm, digital trimming, eprom) are unavailable.
+ */
+
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/rtc.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/bcd.h>
+
+#define HT1382_SECONDS		0x00	/* Seconds register address */
+#define HT1382_STOP		0x80	/* Oscillator Stop flag */
+#define HT1382_HOUR_1224	0x80	/* 12/24 flag */
+#define HT1382_HOUR_AMPM	0x20	/* AM/PM flag */
+
+#define HT1382_ST1		0x07	/* Status register address */
+#define HT1382_WP		0x80	/* Write Protect flag */
+
+struct ht1382_regs {
+	uint8_t		second;
+	uint8_t		minute;
+	uint8_t		hour;
+	uint8_t		date;
+	uint8_t		month;
+	uint8_t		day;
+	uint8_t		year;
+};
+
+static struct i2c_driver ht1382_driver;
+
+static int ht1382_read(struct device *dev, void *data, uint8_t off, uint8_t len)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct i2c_msg msgs[] = {
+		{
+			.addr = client->addr,
+			.flags = 0,
+			.len = 1,
+			.buf = &off,
+		}, {
+			.addr = client->addr,
+			.flags = I2C_M_RD,
+			.len = len,
+			.buf = data,
+		}
+	};
+
+	if (i2c_transfer(client->adapter, msgs, 2) == 2)
+		return 0;
+
+	return -EIO;
+}
+
+static int ht1382_write(struct device *dev, void *data, uint8_t off, uint8_t len)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	uint8_t buffer[len + 1];
+
+	buffer[0] = off;
+	memcpy(&buffer[1], data, len);
+
+	if (i2c_master_send(client, buffer, len + 1) == len + 1)
+		return 0;
+
+	return -EIO;
+}
+
+static int ht1382_rtc_read_time(struct device *dev, struct rtc_time *tm)
+{
+	struct ht1382_regs regs;
+	int error;
+
+	error = ht1382_read(dev, &regs, 0, sizeof(regs));
+	if (error)
+		return error;
+
+	dev_dbg(dev,
+		"%s: raw data is sec=%02x, min=%02x, hour=%02x, "
+		"date=%02x, day=%02x, mon=%02x, "
+		"year=%02x\n",
+		__func__,
+		regs.second,regs.minute,regs.hour,
+		regs.date,regs.day,regs.month,regs.year);
+
+	tm->tm_sec = bcd2bin(regs.second & 0x7f);
+	tm->tm_min = bcd2bin(regs.minute & 0x7f);
+        if (regs.hour & HT1382_HOUR_1224) {
+                tm->tm_hour = bcd2bin(regs.hour & 0x1f);
+                if (regs.hour & HT1382_HOUR_AMPM) tm->tm_hour += 12;
+        } else {
+                tm->tm_hour = bcd2bin(regs.hour & 0x3f);
+	}
+	tm->tm_mday = bcd2bin(regs.date);
+	tm->tm_wday = bcd2bin(regs.day) - 1;
+	tm->tm_mon = bcd2bin(regs.month) - 1;
+	tm->tm_year = bcd2bin(regs.year) + 100;
+	if (rtc_valid_tm(tm)) {
+		dev_err(dev, "retrieved date/time is not valid.\n");		
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int ht1382_rtc_set_time(struct device *dev, struct rtc_time *tm)
+{
+	struct ht1382_regs regs;
+	uint8_t reg;
+	int error;
+
+	/* WP off */
+	reg = 0;
+	error = ht1382_write(dev, &reg, HT1382_ST1, 1);
+	if (error)
+		return error;
+
+	regs.second = bin2bcd(tm->tm_sec);
+	regs.minute = bin2bcd(tm->tm_min);
+	regs.hour = bin2bcd(tm->tm_hour) | HT1382_HOUR_1224;
+	regs.day = bin2bcd(tm->tm_wday + 1);
+	regs.date = bin2bcd(tm->tm_mday);
+	regs.month = bin2bcd(tm->tm_mon + 1);
+	regs.year = bin2bcd(tm->tm_year % 100);
+
+	error = ht1382_write(dev, &regs, 0, sizeof(regs));
+	if (error)
+		return error;
+
+	/* WP on */
+	reg = 0x80;
+	return ht1382_write(dev, &reg, HT1382_ST1, 1);
+}
+
+static const struct rtc_class_ops ht1382_rtc_ops = {
+	.read_time	= ht1382_rtc_read_time,
+	.set_time	= ht1382_rtc_set_time,
+};
+
+static int ht1382_probe(struct i2c_client *client,
+				const struct i2c_device_id *id)
+{
+	struct device *dev = &client->dev;
+	struct rtc_device *rtc;
+	uint8_t reg;
+	int error;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+		return -ENODEV;
+
+	error = ht1382_read(dev, &reg, HT1382_SECONDS, 1);
+	if (!error && (reg & HT1382_STOP)) {
+		dev_warn(dev, "Oscillator was halted. Restarting...\n");
+		reg &= ~HT1382_STOP;
+		error = ht1382_write(dev, &reg, HT1382_SECONDS, 1);
+	}
+	if (error)
+		return error;
+
+	rtc = devm_rtc_device_register(&client->dev, ht1382_driver.driver.name,
+						&ht1382_rtc_ops, THIS_MODULE);
+	if (IS_ERR(rtc))
+		return PTR_ERR(rtc);
+
+	i2c_set_clientdata(client, rtc);
+
+	return 0;
+}
+
+static const struct i2c_device_id ht1382_id[] = {
+	{ "ht1382", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, ht1382_id);
+
+static const struct of_device_id ht1382_of_match[] = {
+        { .compatible = "htk,ht1382" },
+        {}
+};
+MODULE_DEVICE_TABLE(of, ht1382_of_match);
+
+static struct i2c_driver ht1382_driver = {
+	.driver = {
+		.name	= "ht1382",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= ht1382_probe,
+	.id_table	= ht1382_id,
+};
+
+module_i2c_driver(ht1382_driver);
+
+MODULE_AUTHOR("Karoly Pocsi <chrlee@chrlee.net>");
+MODULE_DESCRIPTION("Holtek 1382 I2C RTC driver");
+MODULE_LICENSE("GPL");
diff -Naur a/include/linux/ide.h b/include/linux/ide.h
--- a/include/linux/ide.h	2016-03-13 21:28:54.000000000 -0700
+++ b/include/linux/ide.h	2016-03-13 22:15:36.600554082 -0700
@@ -1542,7 +1542,10 @@
 
 static inline void ide_dump_identify(u8 *id)
 {
-	print_hex_dump(KERN_INFO, "", DUMP_PREFIX_NONE, 16, 2, id, 512, 0);
+
+	print_hex_dump(KERN_DEBUG, "", DUMP_PREFIX_NONE, 16, 2, id, 512, 0);
+
+
 }
 
 static inline int hwif_to_node(ide_hwif_t *hwif)
diff -Naur a/include/linux/leds.h b/include/linux/leds.h
--- a/include/linux/leds.h	2016-03-13 21:28:54.000000000 -0700
+++ b/include/linux/leds.h	2016-03-13 22:15:36.600554082 -0700
@@ -1,6 +1,7 @@
 /*
  * Driver model for leds and led triggers
  *
+ * Copyright 2013 bodhi <mibodhi@gmail.com>
  * Copyright (C) 2005 John Lenz <lenz@cs.wisc.edu>
  * Copyright (C) 2005 Richard Purdie <rpurdie@openedhand.com>
  *
@@ -320,9 +321,9 @@
 
 /* Trigger specific functions */
 #ifdef CONFIG_LEDS_TRIGGER_IDE_DISK
-extern void ledtrig_ide_activity(void);
+extern void ledtrig_ide_activity(int portno);
 #else
-static inline void ledtrig_ide_activity(void) {}
+static inline void ledtrig_ide_activity(int portno) {}
 #endif
 
 #if defined(CONFIG_LEDS_TRIGGER_CAMERA) || defined(CONFIG_LEDS_TRIGGER_CAMERA_MODULE)
diff -Naur a/include/linux/platform_data/nsa3xx-hwmon.h b/include/linux/platform_data/nsa3xx-hwmon.h
--- a/include/linux/platform_data/nsa3xx-hwmon.h	1969-12-31 16:00:00.000000000 -0800
+++ b/include/linux/platform_data/nsa3xx-hwmon.h	2016-03-13 22:15:36.600554082 -0700
@@ -0,0 +1,21 @@
+/*
+ * include/linux/nsa3xx.hwmon.h
+ *
+ * Platform data structure for ZyXEL NSA3xx hwmon driver
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef __LINUX_NSA3XX_HWMON_H
+#define __LINUX_NSA3XX_HWMON_H
+
+struct nsa3xx_hwmon_platform_data {
+	/* GPIO pins */
+	unsigned act_pin;
+	unsigned clk_pin;
+	unsigned data_pin;
+};
+
+#endif /* __LINUX_NSA3XX_HWMON_H */
